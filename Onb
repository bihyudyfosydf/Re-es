-- ================================================================
-- ONB DINO QUEST STATUS BUTTON
-- ================================================================

-- Check if this is being loaded as a module or executed directly
local function initializeOnb()
    -- Ensure we have access to the main script's variables
    if not Tabs or not Window or not Library then
        warn("‚ùå Onb: Main script not loaded! Please run the main script first.")
        return false
    end

    -- Define Services exactly as in the main file
    local Services = {
        Workspace = game:GetService("Workspace"),
        ReplicatedStorage = game:GetService("ReplicatedStorage"),
        Players = game:GetService("Players"),
        UserInputService = game:GetService("UserInputService"),
        TweenService = game:GetService("TweenService"),
        CollectionService = game:GetService("CollectionService"),
        HttpService = game:GetService("HttpService"),
        RunService = game:GetService("RunService"),
        GuiService = game:GetService("GuiService"),
        TeleportService = game:GetService("TeleportService"),
        Debris = game:GetService("Debris"),
        SoundService = game:GetService("SoundService")
    }
    
    -- Get LocalPlayer
    local LocalPlayer = Services.Players.LocalPlayer

    -- Create the Event tab if it doesn't exist
    if not Tabs.Event then
        Tabs.Event = Window:AddTab("Event", "calendar")
        print("‚úÖ Created Event tab")
    end

    -- ================================================================
    -- DINO QUEST GROUPBOX
    -- ================================================================
    local DinoQuestGroupBox = Tabs.Event:AddLeftGroupbox("DINO QUEST")

    -- Dino Quest Button
    DinoQuestGroupBox:AddButton("Check Dino Quest Status", function()
        print("ü¶ï The dino quest player has now read codespace")

        -- Get the player's dino quest data
        local success, result = pcall(function()
            local DataService = require(Services.ReplicatedStorage.Modules.DataService)
            local QuestsController = require(Services.ReplicatedStorage.Modules.QuestsController)

            local data = DataService:GetData()
            if not data then
                print("‚ùå No player data found")
                return
            end

            -- Check DinoQuests milestone progress
            if data.DinoQuests then
                print("üìä DINO QUEST PROGRESS:")
                print("   Milestone Progress:", data.DinoQuests.Milestone.Progress)
                print("   Completed Milestones:", #data.DinoQuests.Milestone.Completed)
                print("   Claimed Milestones:", #data.DinoQuests.Milestone.Claimed)
            end

            -- Use the EXACT same logic as the DinoQuests UI
            local questCount = 0
            print("üéØ YOUR ACTIVE DINO QUESTS:")

            -- Check DinoQuests.Containers for active container IDs (same as DinoQuestsController)
            if data.DinoQuests and data.DinoQuests.Containers then
                for containerId, containerIdValue in pairs(data.DinoQuests.Containers) do
                    -- Get the actual container data using QuestsController (same as UI)
                    local containerData = QuestsController:GetContainerFromId(containerIdValue)

                    if containerData and containerData.Quests then
                        print("   üì¶ Container ID:", containerIdValue)

                        for i, quest in pairs(containerData.Quests) do
                            questCount = questCount + 1
                            local questObj = QuestsController:GetQuest(quest.Type)
                            if questObj then
                                local display = questObj:Display(quest.Progress, quest.Target, quest.Arguments)
                                local status = quest.Completed and "‚úÖ COMPLETED" or "‚è≥ IN PROGRESS"
                                print("   Quest " .. questCount .. ":", display.Title)
                                print("     Progress:", display.Bar)
                                print("     Status:", status)
                                print("     Type:", quest.Type)
                                if quest.Arguments then
                                    print("     Arguments:", table.concat(quest.Arguments, ", "))
                                end
                            else
                                print("   Quest " .. questCount .. ": Unknown quest type -", quest.Type)
                            end
                        end
                    end
                end
            end

            if questCount == 0 then
                print("‚ùå No active dino quests found")
                print("üîç Debug - Available QuestContainers:")
                if data.QuestContainers then
                    for containerId, container in pairs(data.QuestContainers) do
                        print("   Container ID:", containerId)
                        if container.Quests then
                            for i, quest in pairs(container.Quests) do
                                print("     Quest " .. i .. " Type:", quest.Type)
                                if quest.Arguments then
                                    print("     Arguments:", table.concat(quest.Arguments, ", "))
                                end
                            end
                        end
                    end
                end
            end
        end)

        if not success then
            print("‚ùå Error checking dino quest data:", result)
        end

        Library:Notify("ü¶ï Your active dino quests displayed in console!", 3)
    end)

    return true
end

-- Return the initialization function
return initializeOnb 
