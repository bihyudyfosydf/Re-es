-- ================================================================
-- RE:FACTOR AUTO MOVE SYSTEM
-- Auto-integrates with main script when globals are available
-- ================================================================

-- Wait for main script to be ready
local function waitForMainScript()
    local maxWait = 30 -- Maximum 30 seconds
    local waited = 0
    
    while waited < maxWait do
        -- Check multiple possible global locations
        local Library = getgenv and getgenv().Library or _G.Library
        local Window = getgenv and getgenv().Window or _G.Window
        local Tabs = getgenv and getgenv().Tabs or _G.Tabs
        local MainScriptLoaded = getgenv and getgenv().MainScriptLoaded or _G.MainScriptLoaded
        
        if Library and Window and Tabs and MainScriptLoaded then
            print("‚úÖ Auto Move: Main script globals found!")
            return Library, Window, Tabs
        end
        
        task.wait(0.5)
        waited = waited + 0.5
    end
    
    error("‚ùå Auto Move: Main script not ready after " .. maxWait .. " seconds")
end

-- Get references to main script components
local Library, Window, Tabs = waitForMainScript()

-- ================================================================
-- SERVICES SETUP
-- ================================================================
local Services = {
    Workspace = game:GetService("Workspace"),
    ReplicatedStorage = game:GetService("ReplicatedStorage"),
    Players = game:GetService("Players"),
    RunService = game:GetService("RunService"),
    TweenService = game:GetService("TweenService")
}

local LocalPlayer = Services.Players.LocalPlayer

-- ================================================================
-- ADD AUTO MOVE GROUPBOX TO ESSENTIAL TAB
-- ================================================================
local AutoMoveGroupBox = Tabs.Essential:AddLeftGroupbox("Auto Move üöÄ")

-- ================================================================
-- ADD AUTO PLACE EGG GROUPBOX TO ESSENTIAL TAB
-- ================================================================
local AutoEggGroupBox = Tabs.Essential:AddRightGroupbox("Auto Place Egg ü•ö")

-- ================================================================
-- PLANT MOVE SYSTEM
-- ================================================================

-- Variables for Plant Move System
local PlantsToMove = {}
local PlantsToMoveTo = {}
local PlantMoveEnabled = false
local MinMoveDistance = 20 -- Only move plants farther than this distance from target

-- Complete list of all plants and fruits in the game
local AllPlantsAndFruits = {
    "Aloe Vera", "Apple", "Avocado", "Bamboo", "Banana", "Beanstalk", "Bee Balm", "Bell Pepper",
    "Bendboo", "Blood Banana", "Blue Lollipop", "Blueberry", "Bone Blossom", "Boneboo", "Burning Bud", 
    "Cacao", "Cactus", "Candy Blossom", "Candy Sunflower", "Cantaloupe", "Carrot", "Cauliflower", 
    "Celestiberry", "Cherry Blossom", "Cherry OLD", "Chocolate Carrot", "Cocovine", "Coconut", "Corn", 
    "Cranberry", "Crimson Vine", "Crocus", "Cursed Fruit", "Daffodil", "Dandelion", "Delphinium", 
    "Dragon Fruit", "Dragon Pepper", "Durian", "Easter Egg", "Eggplant", "Elephant Ears", "Ember Lily", 
    "Feijoa", "Firefly Fern", "Firework Flower", "Fossilight", "Foxglove", "Glowshroom", "Grape", 
    "Green Apple", "Guanabana", "Hive Fruit", "Honeysuckle", "Horned Dinoshroom", "Ice Cream Bean", 
    "Kiwi", "Lavender", "Lemon", "Liberty Lily", "Lilac", "Lily of the Valley", "Lime", "Loquat", 
    "Lotus", "Lumira", "Mango", "Manuka Flower", "Mega Mushroom", "Merica Mushroom", "Mint", 
    "Moon Blossom", "Moon Mango", "Moon Melon", "Moonflower", "Moonglow", "Mushroom", "Nectar Thorn", 
    "Nectarine", "Nectarshade", "Nightshade", "Noble Flower", "Orange Tulip", "Papaya", "Paradise Petal", 
    "Parasol Flower", "Passionfruit", "Peace Lily", "Peach", "Pear", "Pepper", "Pineapple", "Pink Lily", 
    "Pink Tulip", "Pitcher Plant", "Prickly Pear", "Pumpkin", "Purple Cabbage", "Purple Dahlia", 
    "Rafflesia", "Raspberry", "Red Lollipop", "Rose", "Rosy Delight", "Soul Fruit", "Starfruit", 
    "Stonebite", "Strawberry", "Succulent", "Sugar Apple", "Suncoil", "Sunflower", "Tomato", 
    "Traveler's Fruit", "Venus Fly Trap", "Violet Corn", "Watermelon", "White Mulberry", "Wild Carrot"
}

-- Plants to move FROM dropdown
AutoMoveGroupBox:AddDropdown("PlantsToMove", {
    Values = AllPlantsAndFruits,
    Default = {},
    Multi = true,
    Text = "Plants Wanna Move",
    Tooltip = "Select which plant types you want to move (ALL plants of selected types)",
    Callback = function(Value)
        PlantsToMove = Value
        print("[cb] Plants to move updated:", Value)
        
        -- Show selected plants in notification
        local selectedNames = {}
        for plantName, isSelected in pairs(Value) do
            if isSelected then
                table.insert(selectedNames, plantName)
            end
        end
        
        if #selectedNames > 0 then
            print("üå± Will move ALL:", table.concat(selectedNames, ", "))
        else
            print("üå± No plants selected to move")
        end
    end,
})

-- Plants to move TO dropdown
AutoMoveGroupBox:AddDropdown("PlantsToMoveTo", {
    Values = AllPlantsAndFruits,
    Default = {},
    Multi = true,
    Text = "Plants Wanna Move To",
    Tooltip = "Select where you want to move the plants to",
    Callback = function(Value)
        PlantsToMoveTo = Value
        print("[cb] Plants to move to updated:", Value)
        
        -- Show selected target plants in notification
        local selectedNames = {}
        for plantName, isSelected in pairs(Value) do
            if isSelected then
                table.insert(selectedNames, plantName)
            end
        end
        
        if #selectedNames > 0 then
            print("üéØ Moving to:", table.concat(selectedNames, ", "))
        else
            print("üéØ No target plants selected")
        end
    end,
})

-- Distance threshold slider
AutoMoveGroupBox:AddSlider("MinMoveDistance", {
    Text = "Min Distance to Move",
    Tooltip = "Only move plants that are farther than this distance from target (blocks)",
    Default = 20,
    Min = 5,
    Max = 50,
    Rounding = 0,
    Compact = false,
    Callback = function(Value)
        MinMoveDistance = Value
        print("[cb] Min move distance set to:", Value, "blocks")
        Library:Notify("üìè Will only move plants " .. Value .. "+ blocks away from target", 2)
    end,
})

-- ================================================================
-- PLANT MOVE IMPLEMENTATION
-- ================================================================

-- Additional variables for plant moving
local plantMoveConnection = nil
local currentlyMovingPlants = {} -- Track plants currently being moved
local movedPlants = {} -- Track plants that have already been moved
local lastMoveTime = 0 -- Track time of last move to add delays

-- Function to get player's farm
local function getMyFarm()
    for _, farm in Services.Workspace.Farm:GetChildren() do
        local important = farm:FindFirstChild("Important")
        if important then
            local data = important:FindFirstChild("Data")
            if data and data:FindFirstChild("Owner") and data.Owner.Value == LocalPlayer.Name then
                return farm
            end
        end
    end
    return nil
end

-- Function to find and equip trowel tool
local function findAndEquipTrowel()
    local backpack = LocalPlayer:FindFirstChild("Backpack")
    if not backpack then 
        return nil
    end

    -- Check if trowel is already equipped
    if LocalPlayer.Character then
        for _, equippedItem in pairs(LocalPlayer.Character:GetChildren()) do
            if equippedItem:IsA("Tool") and string.find(equippedItem.Name, "Trowel") then
                return equippedItem
            end
        end
    end

    -- Look for trowel in backpack
    local trowelTool = nil
    for _, item in pairs(backpack:GetChildren()) do
        if item:IsA("Tool") and string.find(item.Name, "Trowel") then
            trowelTool = item
            break
        end
    end

    -- Equip the trowel tool
    if trowelTool and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
        LocalPlayer.Character.Humanoid:EquipTool(trowelTool)
        task.wait(0.5)
        return LocalPlayer.Character:FindFirstChild(trowelTool.Name)
    end
    
    return nil
end

-- Function to find plants by name pattern
local function findPlantsByName(plantName)
    local myFarm = getMyFarm()
    if not myFarm then
        return {}
    end

    local important = myFarm:FindFirstChild("Important")
    if not important then
        return {}
    end

    local plantsPhysical = important:FindFirstChild("Plants_Physical")
    if not plantsPhysical then
        return {}
    end

    local foundPlants = {}
    for _, plant in pairs(plantsPhysical:GetChildren()) do
        if string.find(plant.Name:lower(), plantName:lower()) then
            table.insert(foundPlants, plant)
        end
    end
    
    return foundPlants
end

-- Function to get target plant's position directly
local function getTargetPlantPosition(targetPlantName)
    -- Find target plants
    local targetPlants = findPlantsByName(targetPlantName)
    if #targetPlants == 0 then
        return nil
    end

    -- Get the first target plant's position directly
    local targetPlant = targetPlants[1]
    return targetPlant:GetPivot().Position
end

-- Function to move a single plant
local function movePlant(plantToMove, targetPlantName)
    local plantId = tostring(plantToMove)
    
    -- Check if this specific plant is already being moved
    if currentlyMovingPlants[plantId] then
        return false
    end
    
    -- Mark this plant as currently being moved
    currentlyMovingPlants[plantId] = true
    
    local moveSuccess = false
    
    local success = pcall(function()
        -- Find and equip trowel
        local trowelTool = findAndEquipTrowel()
        if not trowelTool then
            print("‚ùå Need a Trowel tool in inventory!")
            return
        end

        -- Get target plant position directly
        local targetPosition = getTargetPlantPosition(targetPlantName)
        if not targetPosition then
            print("‚ùå Target plant not found:", targetPlantName)
            return
        end

        -- Get the TrowelRemote
        local TrowelRemote = Services.ReplicatedStorage.GameEvents:FindFirstChild("TrowelRemote")
        if not TrowelRemote then
            print("‚ùå TrowelRemote not found!")
            return
        end

        -- Store original position for distance check
        local originalPosition = plantToMove:GetPivot().Position

        -- Step 1: Pickup the plant
        print("üîß Picking up plant:", plantToMove.Name)
        local pickupSuccess = TrowelRemote:InvokeServer("Pickup", trowelTool, plantToMove)
        
        if pickupSuccess then
            -- Wait for pickup to fully process (trowel system needs time)
            task.wait(0.8) 
            
            -- Step 2: Place the plant directly at target plant's position
            local placementCFrame = CFrame.new(
                targetPosition.X + math.random(-4, 4), -- Slightly larger random offset
                targetPosition.Y,
                targetPosition.Z + math.random(-4, 4)  -- Slightly larger random offset
            )
            
            print("üîß Placing plant at target location:", placementCFrame.Position)
            
            -- Place the plant
            TrowelRemote:InvokeServer("Place", trowelTool, plantToMove, placementCFrame)
            
            -- Wait for placement animation to complete (trowel system has 0.4s + animation time)
            task.wait(1.2)
            
            -- Check if plant was successfully moved by comparing to original position
            local newPosition = plantToMove:GetPivot().Position
            local distanceMoved = (newPosition - originalPosition).Magnitude
            local distanceToTarget = (newPosition - targetPosition).Magnitude
            
            -- If plant moved at least 5 blocks and is within 15 blocks of target, consider success
            if distanceMoved >= 5 and distanceToTarget <= 15 then
                print("‚úÖ Plant moved successfully! Distance moved:", math.floor(distanceMoved), "blocks")
                moveSuccess = true
            else
                print("‚ùå Plant may not have moved properly. Distance moved:", math.floor(distanceMoved), "blocks")
            end
        else
            print("‚ùå Failed to pickup plant")
        end
    end)
    
    if not success then
        print("‚ùå Error moving plant:", debug.traceback())
    end
    
    -- Clear the moving flag for this specific plant
    currentlyMovingPlants[plantId] = nil
    return moveSuccess
end

-- Main plant moving function
local function performPlantMove()
    if not PlantMoveEnabled then 
        return 
    end
    
    -- Add delay between moves (trowel system needs time: 0.4s + animation = ~2 seconds minimum)
    local currentTime = tick()
    if currentTime - lastMoveTime < 2.5 then
        return -- Not enough time has passed for next move
    end
    
    -- Check if we have plants to move and targets
    local hasToMove = false
    local hasTargets = false
    
    for _, selected in pairs(PlantsToMove) do
        if selected then hasToMove = true break end
    end
    
    for _, selected in pairs(PlantsToMoveTo) do
        if selected then hasTargets = true break end
    end
    
    if not hasToMove or not hasTargets then
        return
    end
    
    -- Find target plant name first
    local targetPlantName = nil
    for targetName, isTargetSelected in pairs(PlantsToMoveTo) do
        if isTargetSelected then
            targetPlantName = targetName
            break
        end
    end
    
    if not targetPlantName then
        return
    end
    
    -- Find the next plant to move from ANY selected type
    local plantToMove = nil
    local plantTypeName = nil
    
    -- Get target position once for distance checks
    local targetPosition = getTargetPlantPosition(targetPlantName)
    if not targetPosition then
        print("‚ùå Target plant not found:", targetPlantName)
        return
    end
    
    for plantName, isSelected in pairs(PlantsToMove) do
        if isSelected then
            local plantsOfThisType = findPlantsByName(plantName)
            
            -- Look for an unmoved plant of this type that is FAR from target
            for _, plant in pairs(plantsOfThisType) do
                local plantId = tostring(plant)
                if not movedPlants[plantId] and not currentlyMovingPlants[plantId] then
                    -- Check if plant is already close to target
                    local plantPosition = plant:GetPivot().Position
                    local distanceToTarget = (plantPosition - targetPosition).Magnitude
                    
                    -- Only move plants that are far away (more than MinMoveDistance blocks from target)
                    if distanceToTarget > MinMoveDistance then
                        plantToMove = plant
                        plantTypeName = plantName
                        print("üîç Found", plantName, "that's", math.floor(distanceToTarget), "blocks away from target (min:", MinMoveDistance .. ")")
                        break
                    else
                        print("‚è≠Ô∏è Skipping", plantName, "- already close to target (", math.floor(distanceToTarget), "blocks, min:", MinMoveDistance .. ")")
                        -- Mark as moved so we don't check it again
                        movedPlants[plantId] = true
                    end
                end
            end
            
            -- If we found a plant to move, break out of the type loop
            if plantToMove then
                break
            end
        end
    end
    
    -- If we found a plant to move, move it
    if plantToMove then
        local plantId = tostring(plantToMove)
        print("üå± Moving", plantToMove.Name, "(" .. plantTypeName .. ") to", targetPlantName, "area")
        
        lastMoveTime = currentTime -- Update last move time BEFORE moving
        
        if movePlant(plantToMove, targetPlantName) then
            -- Mark this plant as moved
            movedPlants[plantId] = true
            print("‚úÖ Plant moved successfully - next plant in ~2.5 seconds...")
        else
            print("‚ùå Plant move failed - will try next plant in ~2.5 seconds...")
        end
    else
        -- No more plants to move - check if we should reset
        local totalUnmovedPlants = 0
        for plantName, isSelected in pairs(PlantsToMove) do
            if isSelected then
                local plantsOfThisType = findPlantsByName(plantName)
                for _, plant in pairs(plantsOfThisType) do
                    local plantId = tostring(plant)
                    if not movedPlants[plantId] then
                        totalUnmovedPlants = totalUnmovedPlants + 1
                    end
                end
            end
        end
        
        if totalUnmovedPlants == 0 then
            print("ÔøΩ All selected plants have been moved! Resetting tracker...")
            -- Reset moved plants tracker to allow moving them again
            movedPlants = {}
        end
    end
end

-- Plant Move toggle
AutoMoveGroupBox:AddToggle("PlantMove", {
    Text = "Auto Move Plants (One by One)",
    Tooltip = "Continuously move ALL selected plant types to target locations one by one using trowel",
    Default = false,
    Callback = function(Value)
        PlantMoveEnabled = Value
        print("[cb] Plant Move toggled:", Value)
        
        if Value then
            Library:Notify("üå± Auto Plant Move enabled! Moving plants one by one...", 3)
            
            -- Clear moved plants tracker for fresh start
            movedPlants = {}
            currentlyMovingPlants = {}
            lastMoveTime = 0 -- Reset timing
            
            -- Start plant move loop
            plantMoveConnection = Services.RunService.Heartbeat:Connect(function()
                performPlantMove()
            end)
        else
            Library:Notify("üå± Auto Plant Move disabled!", 3)
            
            -- Stop plant move loop
            if plantMoveConnection then
                plantMoveConnection:Disconnect()
                plantMoveConnection = nil
            end
            
            -- Clear all trackers
            movedPlants = {}
            currentlyMovingPlants = {}
            lastMoveTime = 0
        end
    end,
})

-- Add reset button
AutoMoveGroupBox:AddButton("Reset Move Tracker", function()
    movedPlants = {}
    currentlyMovingPlants = {}
    lastMoveTime = 0
    Library:Notify("üîÑ Plant move tracker reset! All plants can be moved again.", 3)
    print("üîÑ Move tracker reset - all plants available for moving again")
end)

-- ================================================================
-- EGG PLACEMENT SYSTEM
-- ================================================================

-- Get egg data from ReplicatedStorage
local PetEggData = require(Services.ReplicatedStorage.Data.ModuleScripts.PetEggData)

-- Variables for Egg Placement System
local EggsToPlace = {}
local EggPlaceEnabled = false

-- Create egg type list from PetEggData
local AllEggTypes = {}
for eggName, _ in pairs(PetEggData) do
    table.insert(AllEggTypes, eggName)
end

-- Sort alphabetically for better UI
table.sort(AllEggTypes)

-- Eggs to place dropdown
AutoEggGroupBox:AddDropdown("EggsToPlace", {
    Values = AllEggTypes,
    Default = {},
    Multi = true,
    Text = "Eggs to Place",
    Tooltip = "Select which egg types you want to place on your farm",
    Callback = function(Value)
        EggsToPlace = Value
        print("[cb] Eggs to place updated:", Value)
        
        -- Show selected eggs in notification
        local selectedNames = {}
        for eggName, isSelected in pairs(Value) do
            if isSelected then
                table.insert(selectedNames, eggName)
            end
        end
        
        if #selectedNames > 0 then
            print("ü•ö Will place eggs:", table.concat(selectedNames, ", "))
        else
            print("ü•ö No eggs selected to place")
        end
    end,
})

-- ================================================================
-- EGG PLACEMENT IMPLEMENTATION
-- ================================================================

-- Variables for egg placement
local eggPlaceConnection = nil
local lastEggPlaceTime = 0 -- Track time of last placement
local currentEggIndex = 1 -- Track which egg type we're placing

-- Function to get player's inventory
local function getPlayerInventory()
    local backpack = LocalPlayer:FindFirstChild("Backpack")
    if not backpack then
        return {}
    end
    
    local inventory = {}
    for _, item in pairs(backpack:GetChildren()) do
        if item:IsA("Tool") then
            table.insert(inventory, item.Name)
        end
    end
    
    return inventory
end

-- Function to equip an egg tool
local function equipEgg(eggName)
    local backpack = LocalPlayer:FindFirstChild("Backpack")
    if not backpack then
        return false
    end
    
    -- Look for the egg in backpack
    for _, item in pairs(backpack:GetChildren()) do
        if item:IsA("Tool") and item.Name == eggName then
            -- Equip the egg
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
                LocalPlayer.Character.Humanoid:EquipTool(item)
                task.wait(0.5) -- Wait for equip
                return true
            end
        end
    end
    
    return false
end

-- Function to get a valid position on player's farm
local function getFarmPlacementPosition()
    local myFarm = getMyFarm()
    if not myFarm then
        return nil
    end
    
    -- Get farm bounds from the farm's primary part or first part
    local farmPart = myFarm.PrimaryPart or myFarm:FindFirstChildOfClass("Part")
    if not farmPart then
        return nil
    end
    
    local farmPosition = farmPart.Position
    local farmSize = farmPart.Size
    
    -- Generate a random position within the farm bounds
    local x = farmPosition.X + math.random(-farmSize.X/2 + 5, farmSize.X/2 - 5)
    local z = farmPosition.Z + math.random(-farmSize.Z/2 + 5, farmSize.Z/2 - 5)
    local y = farmPosition.Y + 5 -- Place slightly above the farm
    
    return Vector3.new(x, y, z)
end

-- Function to place an egg
local function placeEgg(eggName)
    local success = pcall(function()
        -- Check if player has this egg in inventory
        local inventory = getPlayerInventory()
        local hasEgg = false
        for _, itemName in pairs(inventory) do
            if itemName == eggName then
                hasEgg = true
                break
            end
        end
        
        if not hasEgg then
            print("‚ùå Don't have", eggName, "in inventory")
            return false
        end
        
        -- Equip the egg
        if not equipEgg(eggName) then
            print("‚ùå Failed to equip", eggName)
            return false
        end
        
        -- Get a valid position on the farm
        local position = getFarmPlacementPosition()
        if not position then
            print("‚ùå Could not find valid farm position")
            return false
        end
        
        -- Get the PetEggService remote
        local PetEggService = Services.ReplicatedStorage.GameEvents:FindFirstChild("PetEggService")
        if not PetEggService then
            print("‚ùå PetEggService remote not found!")
            return false
        end
        
        -- Place the egg using the remote
        print("ü•ö Placing", eggName, "at position:", position)
        PetEggService:FireServer("CreateEgg", position)
        
        -- Wait for placement to complete
        task.wait(1.5)
        
        print("‚úÖ Placed", eggName, "successfully!")
        return true
    end)
    
    if not success then
        print("‚ùå Error placing egg:", debug.traceback())
        return false
    end
    
    return true
end

-- Main egg placing function
local function performEggPlacement()
    if not EggPlaceEnabled then
        return
    end
    
    -- Add delay between placements
    local currentTime = tick()
    if currentTime - lastEggPlaceTime < 3 then
        return -- Not enough time has passed for next placement
    end
    
    -- Check if we have any eggs to place
    local hasEggsToPlace = false
    local selectedEggs = {}
    
    for eggName, isSelected in pairs(EggsToPlace) do
        if isSelected then
            hasEggsToPlace = true
            table.insert(selectedEggs, eggName)
        end
    end
    
    if not hasEggsToPlace or #selectedEggs == 0 then
        return
    end
    
    -- Cycle through selected eggs
    if currentEggIndex > #selectedEggs then
        currentEggIndex = 1
    end
    
    local eggToPlace = selectedEggs[currentEggIndex]
    
    if eggToPlace then
        print("ü•ö Attempting to place:", eggToPlace)
        lastEggPlaceTime = currentTime -- Update last placement time BEFORE placing
        
        if placeEgg(eggToPlace) then
            print("‚úÖ Egg placed successfully - next egg in ~3 seconds...")
        else
            print("‚ùå Egg placement failed - will try next egg in ~3 seconds...")
        end
        
        -- Move to next egg for next cycle
        currentEggIndex = currentEggIndex + 1
    end
end

-- Egg Place toggle
AutoEggGroupBox:AddToggle("EggPlace", {
    Text = "Auto Place Eggs",
    Tooltip = "Continuously place selected egg types on your farm",
    Default = false,
    Callback = function(Value)
        EggPlaceEnabled = Value
        print("[cb] Egg Place toggled:", Value)
        
        if Value then
            Library:Notify("ü•ö Auto Egg Place enabled! Placing eggs on farm...", 3)
            
            -- Reset egg placement variables
            currentEggIndex = 1
            lastEggPlaceTime = 0
            
            -- Start egg placement loop
            eggPlaceConnection = Services.RunService.Heartbeat:Connect(function()
                performEggPlacement()
            end)
        else
            Library:Notify("ü•ö Auto Egg Place disabled!", 3)
            
            -- Stop egg placement loop
            if eggPlaceConnection then
                eggPlaceConnection:Disconnect()
                eggPlaceConnection = nil
            end
            
            -- Reset variables
            currentEggIndex = 1
            lastEggPlaceTime = 0
        end
    end,
})

-- Add button to show current inventory
AutoEggGroupBox:AddButton("Check Inventory", function()
    local inventory = getPlayerInventory()
    local eggCount = 0
    local eggList = {}
    
    -- Count eggs in inventory
    for _, itemName in pairs(inventory) do
        -- Check if item is an egg
        if PetEggData[itemName] then
            eggCount = eggCount + 1
            table.insert(eggList, itemName)
        end
    end
    
    if eggCount > 0 then
        print("üéí Eggs in inventory (" .. eggCount .. "):", table.concat(eggList, ", "))
        Library:Notify("üéí You have " .. eggCount .. " eggs in inventory", 3)
    else
        print("üéí No eggs found in inventory")
        Library:Notify("üéí No eggs found in inventory", 3)
    end
end)

-- ================================================================
-- AUTO MOVE & EGG PLACEMENT INITIALIZATION COMPLETE
-- ================================================================
print("üöÄ Auto Move & Auto Egg Place systems integrated with Essential tab!")
Library:Notify("üöÄ Auto Move & Auto Egg Place loaded!", 3)

-- Return success indicator
return true 
