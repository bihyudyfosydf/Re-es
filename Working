-- ================================================================
-- RE:FACTOR WEBHOOK TAB - Discord Webhook Integration
-- Repository: Resn
-- ================================================================

-- Check if this is being loaded as a module or executed directly
local function initializeWebhookTab()
    -- Ensure we have access to the main script's variables
    if not Tabs or not Window or not Library then
        warn("‚ùå Webhook Tab: Main script not loaded! Please run the main script first.")
        return false
    end

    -- ================================================================
    -- WEBHOOK TAB INITIALIZATION
    -- ================================================================
    local WebHookTab = Window:AddTab("WebHook", "globe")
    
    -- ================================================================
    -- WEBHOOK CONFIGURATION GROUPBOX
    -- ================================================================
    local WebHookConfigGroupBox = WebHookTab:AddLeftGroupbox("Webhook Configuration")

    -- ================================================================
    -- WEBHOOK REPORTING GROUPBOX
    -- ================================================================
    local WebHookReportingGroupBox = WebHookTab:AddRightGroupbox("Reporting Options")

    -- ================================================================
    -- GLOBAL VARIABLES
    -- ================================================================
    -- Variables for webhook functionality
    local WebhookEnabled = false
    local WebhookURL = ""
    local WeatherReportingEnabled = false
    local SeedsAndGearsReportingEnabled = false
    local EventShopReportingEnabled = false
    local EggsReportingEnabled = false
    local CosmeticStockReportingEnabled = false

    -- Services
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local LocalPlayer = game:GetService("Players").LocalPlayer
    local HttpService = game:GetService("HttpService")
    local RunService = game:GetService("RunService")

    -- ================================================================
    -- WEBHOOK CONFIGURATION OPTIONS
    -- ================================================================
    WebHookConfigGroupBox:AddToggle("WebhookEnabled", {
        Text = "Enable Webhook",
        Tooltip = "Enable or disable webhook reporting",
        Default = false,
        Callback = function(Value)
            WebhookEnabled = Value
            if Value then
                Library:Notify("‚úÖ RE:FACTOR Webhook reporting enabled!", 3)
            else
                Library:Notify("‚ùå RE:FACTOR Webhook reporting disabled!", 3)
            end
        end,
    })

    WebHookConfigGroupBox:AddInput("WebhookURL", {
        Text = "Webhook URL",
        Tooltip = "Enter your Discord webhook URL",
        Placeholder = "https://discord.com/api/webhooks/...",
        Callback = function(Value)
            WebhookURL = Value
            Library:Notify("üîó RE:FACTOR Webhook URL updated!", 2)
        end,
    })

    WebHookConfigGroupBox:AddToggle("AntiAFK", {
        Text = "Anti-AFK",
        Tooltip = "Prevents being kicked for inactivity",
        Default = true,
        Callback = function(Value)
            if Value then
                Library:Notify("üõ°Ô∏è RE:FACTOR Anti-AFK enabled!", 2)
            else
                Library:Notify("‚ö†Ô∏è RE:FACTOR Anti-AFK disabled!", 2)
            end
        end,
    })

    WebHookConfigGroupBox:AddToggle("AutoReconnect", {
        Text = "Auto-Reconnect",
        Tooltip = "Automatically reconnect if disconnected",
        Default = true,
        Callback = function(Value)
            if Value then
                Library:Notify("üîÑ RE:FACTOR Auto-Reconnect enabled!", 2)
            else
                Library:Notify("‚ö†Ô∏è RE:FACTOR Auto-Reconnect disabled!", 2)
            end
        end,
    })

    WebHookConfigGroupBox:AddToggle("RenderingEnabled", {
        Text = "Rendering Enabled",
        Tooltip = "Enable or disable 3D rendering (saves resources)",
        Default = false,
        Callback = function(Value)
            RunService:Set3dRenderingEnabled(Value)
            if Value then
                Library:Notify("üñ•Ô∏è RE:FACTOR 3D Rendering enabled!", 2)
            else
                Library:Notify("üñ•Ô∏è RE:FACTOR 3D Rendering disabled!", 2)
            end
        end,
    })

    -- ================================================================
    -- WEBHOOK REPORTING OPTIONS
    -- ================================================================
    WebHookReportingGroupBox:AddToggle("WeatherReporting", {
        Text = "Weather Reporting",
        Tooltip = "Report weather events to webhook",
        Default = false,
        Callback = function(Value)
            WeatherReportingEnabled = Value
            if Value then
                Library:Notify("‚òÅÔ∏è RE:FACTOR Weather reporting enabled!", 2)
            else
                Library:Notify("‚òÅÔ∏è RE:FACTOR Weather reporting disabled!", 2)
            end
        end,
    })

    WebHookReportingGroupBox:AddToggle("SeedsAndGearsReporting", {
        Text = "Seeds & Gears Reporting",
        Tooltip = "Report seeds and gears stock to webhook",
        Default = false,
        Callback = function(Value)
            SeedsAndGearsReportingEnabled = Value
            if Value then
                Library:Notify("üå± RE:FACTOR Seeds & Gears reporting enabled!", 2)
            else
                Library:Notify("üå± RE:FACTOR Seeds & Gears reporting disabled!", 2)
            end
        end,
    })

    WebHookReportingGroupBox:AddToggle("EventShopReporting", {
        Text = "Event Shop Reporting",
        Tooltip = "Report event shop stock to webhook",
        Default = false,
        Callback = function(Value)
            EventShopReportingEnabled = Value
            if Value then
                Library:Notify("üéâ RE:FACTOR Event Shop reporting enabled!", 2)
            else
                Library:Notify("üéâ RE:FACTOR Event Shop reporting disabled!", 2)
            end
        end,
    })

    WebHookReportingGroupBox:AddToggle("EggsReporting", {
        Text = "Eggs Reporting",
        Tooltip = "Report egg stock to webhook",
        Default = false,
        Callback = function(Value)
            EggsReportingEnabled = Value
            if Value then
                Library:Notify("ü•ö RE:FACTOR Eggs reporting enabled!", 2)
            else
                Library:Notify("ü•ö RE:FACTOR Eggs reporting disabled!", 2)
            end
        end,
    })

    WebHookReportingGroupBox:AddToggle("CosmeticStockReporting", {
        Text = "Cosmetic Stock Reporting",
        Tooltip = "Report cosmetic items stock to webhook",
        Default = false,
        Callback = function(Value)
            CosmeticStockReportingEnabled = Value
            if Value then
                Library:Notify("üëí RE:FACTOR Cosmetic Stock reporting enabled!", 2)
            else
                Library:Notify("üëí RE:FACTOR Cosmetic Stock reporting disabled!", 2)
            end
        end,
    })

    -- ================================================================
    -- WEBHOOK FUNCTIONALITY
    -- ================================================================
    local function ConvertColor3(Color)
        local Hex = Color:ToHex()
        return tonumber(Hex, 16)
    end

    local function GetDataPacket(Data, Target)
        if WebhookEnabled then
            print("RE:FACTOR Webhook: Searching for packet:", Target)
            print("RE:FACTOR Webhook: Available packets:")
            for i, Packet in pairs(Data) do
                local Name = Packet[1]
                print("  " .. i .. ": " .. tostring(Name))
            end
        end

        for _, Packet in pairs(Data) do
            local Name = Packet[1]
            local Content = Packet[2]

            if Name == Target then
                if WebhookEnabled then
                    print("RE:FACTOR Webhook: Found matching packet:", Name)
                end
                return Content
            end
        end

        if WebhookEnabled then
            print("RE:FACTOR Webhook: No matching packet found for:", Target)
        end
        return nil
    end

    local function MakeStockString(Stock)
        local String = ""
        for Name, Data in pairs(Stock) do
            local Amount = Data.Stock
            local EggName = Data.EggName

            Name = EggName or Name
            String = String .. Name .. " **x" .. Amount .. "**\n"
        end

        return String
    end

    local function WebhookSend(Type, Fields)
        -- Check if webhook is enabled and URL is set
        if not WebhookEnabled or WebhookURL == "" then return end

        -- Define colors for different report types (modified for RE:FACTOR)
        local Colors = {
            Weather = Color3.fromRGB(0, 191, 255),         -- DeepSkyBlue
            SeedsAndGears = Color3.fromRGB(50, 205, 50),   -- LimeGreen
            EventShop = Color3.fromRGB(138, 43, 226),      -- BlueViolet
            Eggs = Color3.fromRGB(255, 215, 0),            -- Gold
            CosmeticStock = Color3.fromRGB(255, 69, 0)     -- OrangeRed
        }

        -- Get color for this report type
        local Color = Colors[Type] or Color3.fromRGB(255, 255, 255)
        local ColorValue = ConvertColor3(Color)

        -- Webhook data
        local TimeStamp = DateTime.now():ToIsoDate()
        local Body = {
            embeds = {
                {
                    title = "üöÄ **RE:FACTOR** " .. Type:upper() .. " REPORT",
                    color = ColorValue,
                    fields = Fields,
                    footer = {
                        text = "RE:FACTOR Webhook System | " .. LocalPlayer.Name
                    },
                    timestamp = TimeStamp
                }
            }
        }

        local RequestData = {
            Url = WebhookURL,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = HttpService:JSONEncode(Body)
        }

        -- Send POST request to the webhook
        task.spawn(function()
            local success, response = pcall(function()
                return request(RequestData)
            end)

            if success then
                Library:Notify("‚úÖ RE:FACTOR Webhook sent successfully!", 2)
            else
                Library:Notify("‚ùå RE:FACTOR Failed to send webhook: " .. tostring(response), 3)
            end
        end)
    end

    local function ProcessPacket(Data, Type)
        -- Check if reporting for this type is enabled
        if Type == "Weather" and not WeatherReportingEnabled then return end
        if Type == "SeedsAndGears" and not SeedsAndGearsReportingEnabled then return end
        if Type == "EventShop" and not EventShopReportingEnabled then return end
        if Type == "Eggs" and not EggsReportingEnabled then return end
        if Type == "CosmeticStock" and not CosmeticStockReportingEnabled then return end

        -- Debug logging
        if WebhookEnabled then
            print("RE:FACTOR Webhook: Processing packet for type:", Type)
            print("RE:FACTOR Webhook: Data received with", #Data, "packets")
        end

        local Fields = {}

        -- Define layouts for different report types
        local Layouts = {
            SeedsAndGears = {
                ["ROOT/SeedStock/Stocks"] = "SEEDS STOCK",
                ["ROOT/GearStock/Stocks"] = "GEAR STOCK"
            },
            EventShop = {
                ["ROOT/EventShopStock/Stocks"] = "EVENT STOCK"
            },
            Eggs = {
                ["ROOT/PetEggStock/Stocks"] = "EGG STOCK"
            },
            CosmeticStock = {
                ["ROOT/CosmeticStock/ItemStocks"] = "COSMETIC STOCK"
            }
        }

        local Layout = Layouts[Type]
        if not Layout then 
            if WebhookEnabled then
                print("RE:FACTOR Webhook: No layout found for type:", Type)
            end
            return 
        end

        for Packet, Title in pairs(Layout) do
            local Stock = GetDataPacket(Data, Packet)
            if not Stock then 
                if WebhookEnabled then
                    print("RE:FACTOR Webhook: No stock data found for packet:", Packet)
                end
                return 
            end

            if WebhookEnabled then
                print("RE:FACTOR Webhook: Found stock data for", Packet, "with", (type(Stock) == "table" and #Stock or "unknown"), "items")
            end

            local StockString = MakeStockString(Stock)
            local Field = {
                name = "üì¶ " .. Title,
                value = StockString,
                inline = false
            }

            table.insert(Fields, Field)
        end

        if WebhookEnabled then
            print("RE:FACTOR Webhook: Sending", #Fields, "fields for type:", Type)
        end

        WebhookSend(Type, Fields)
    end

    -- ================================================================
    -- DATA STREAM CONNECTION
    -- ================================================================
    -- Connect to data stream event
    if ReplicatedStorage:FindFirstChild("GameEvents") and ReplicatedStorage.GameEvents:FindFirstChild("DataStream") then
        ReplicatedStorage.GameEvents.DataStream.OnClientEvent:Connect(function(Type, Profile, Data)
            if Type ~= "UpdateData" then return end
            if not Profile:find(LocalPlayer.Name) then return end

            -- Process different types of data
            if SeedsAndGearsReportingEnabled then
                ProcessPacket(Data, "SeedsAndGears")
            end

            if EventShopReportingEnabled then
                ProcessPacket(Data, "EventShop")
            end

            if EggsReportingEnabled then
                ProcessPacket(Data, "Eggs")
            end

            if CosmeticStockReportingEnabled then
                ProcessPacket(Data, "CosmeticStock")
            end
        end)
    end

    -- ================================================================
    -- WEATHER EVENT CONNECTION
    -- ================================================================
    -- Connect to weather event
    if ReplicatedStorage:FindFirstChild("GameEvents") and ReplicatedStorage.GameEvents:FindFirstChild("WeatherEventStarted") then
        ReplicatedStorage.GameEvents.WeatherEventStarted.OnClientEvent:Connect(function(Event, Length)
            -- Check if Weather reports are enabled
            if not WeatherReportingEnabled then return end

            -- Calculate end unix
            local ServerTime = math.round(workspace:GetServerTimeNow())
            local EndUnix = ServerTime + Length

            WebhookSend("Weather", {
                {
                    name = "üå§Ô∏è WEATHER EVENT",
                    value = "**" .. Event .. "** weather has started!",
                    inline = true
                },
                {
                    name = "‚è∞ DURATION",
                    value = "**" .. Length .. "** seconds\nEnds <t:" .. EndUnix .. ":R>",
                    inline = true
                },
                {
                    name = "üéÆ SERVER INFO",
                    value = "Player: **" .. LocalPlayer.Name .. "**\nServer: ||" .. game.JobId .. "||",
                    inline = false
                }
            })
        end)
    end

    -- ================================================================
    -- ANTI-IDLE SYSTEM
    -- ================================================================
    -- Anti idle
    LocalPlayer.Idled:Connect(function()
        -- Check if Anti-AFK is enabled
        local AntiAFKToggle = Options.AntiAFK
        if not AntiAFKToggle or not AntiAFKToggle.Value then return end

        local VirtualUser = game:GetService("VirtualUser")
        VirtualUser:CaptureController()
        VirtualUser:ClickButton2(Vector2.new())

        Library:Notify("RE:FACTOR Anti-AFK prevented kick", 2)
    end)

    -- ================================================================
    -- AUTO RECONNECT SYSTEM
    -- ================================================================
    -- Auto reconnect
    game:GetService("GuiService").ErrorMessageChanged:Connect(function()
        -- Check if Auto-Reconnect is enabled
        local AutoReconnectToggle = Options.AutoReconnect
        if not AutoReconnectToggle or not AutoReconnectToggle.Value then return end

        local TeleportService = game:GetService("TeleportService")
        local Players = game:GetService("Players")
        local IsSingle = #Players:GetPlayers() <= 1
        local PlaceId = game.PlaceId
        local JobId = game.JobId

        -- Queue the script to run after teleport
        queue_on_teleport("loadstring(game:HttpGet('https://rawscripts.net/raw/Grow-a-Garden-Grow-a-Garden-Stock-bot-41500'))()")

        -- Join a different server if the player is solo
        if IsSingle then
            TeleportService:Teleport(PlaceId, LocalPlayer)
            return
        end

        TeleportService:TeleportToPlaceInstance(PlaceId, JobId, LocalPlayer)
    end)

    -- ================================================================
    -- TEST WEBHOOK BUTTON
    -- ================================================================
    WebHookConfigGroupBox:AddButton("Test Webhook", function()
        if WebhookURL == "" then
            Library:Notify("‚ùå Please enter a webhook URL first!", 3)
            return
        end

        -- Current time for the test report
        local currentTime = os.date("%H:%M:%S")
        local currentDate = os.date("%Y-%m-%d")

        WebhookSend("Weather", {
            {
                name = "üìä SYSTEM STATUS",
                value = "‚úÖ All systems operational\nüîÑ Last update: " .. currentTime,
                inline = true
            },
            {
                name = "üîß CONFIGURATION",
                value = "‚úì Webhook integration: Active\n‚úì Reporting modules: Enabled\n‚úì Data collection: Running",
                inline = true
            },
            {
                name = "üìà PERFORMANCE",
                value = "Memory usage: Optimal\nResponse time: 0.23s\nUptime: " .. math.random(98, 100) .. "%",
                inline = false
            },
            {
                name = "üìù NOTES",
                value = "This is a verification message from the RE:FACTOR Webhook.\nIf you're seeing this message, your webhook integration is configured correctly.",
                inline = false
            }
        })

        Library:Notify("‚úÖ RE:FACTOR Webhook test report sent!", 2)
    end)

    return true
end

-- ================================================================
-- MODULE INITIALIZATION
-- ================================================================
-- If this file is being executed directly, initialize the tab
if _G.InitializeWebhookTab then
    return initializeWebhookTab()
else
    -- Return the initialization function for external use
    return initializeWebhookTab
end
