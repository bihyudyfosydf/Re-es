-- ================================================================
-- SIMPLE SEED CRAFTER TAB - Basic Recipe Claiming
-- Repository: Resn
-- ================================================================

-- Check if this is being loaded as a module or executed directly
local function initializeCrafterTab()
    -- Ensure we have access to the main script's variables
    if not Tabs or not Window or not Library then
        warn("‚ùå Crafter Tab: Main script not loaded! Please run the main script first.")
        return false
    end

    -- ================================================================
    -- CRAFTER TAB INITIALIZATION
    -- ================================================================
    local CrafterTab = Window:AddTab("Crafter", "hammer")
    
    -- ================================================================
    -- SEED CRAFTER GROUPBOX
    -- ================================================================
    local SeedCrafterGroupBox = CrafterTab:AddLeftGroupbox("Seed Crafter")

    -- ================================================================
    -- GLOBAL VARIABLES
    -- ================================================================
    local SelectedRecipe = nil
    local AutoClaimEnabled = false

    -- Services
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local LocalPlayer = game:GetService("Players").LocalPlayer
    local DataService = require(ReplicatedStorage.Modules.DataService)

    -- Remote Events
    local CraftingGlobalObjectService = ReplicatedStorage.GameEvents.CraftingGlobalObjectService
    local SeedEventCraftingWorkBench = workspace.CraftingTables.SeedEventCraftingWorkBench

    -- Available recipes
    local AvailableRecipes = {
        "Peace Lily",
        "Aloe Vera", 
        "Guanabana"
    }

    -- Recipe data for inventory checking
    local RecipeData = {
        ["Peace Lily"] = {
            Inputs = {
                {ItemType = "Seed", ItemName = "Rafflesia"},
                {ItemType = "Seed", ItemName = "Cauliflower"}
            },
            Cost = {CurrencyType = "SummerCoins", Amount = 3}
        },
        ["Aloe Vera"] = {
            Inputs = {
                {ItemType = "Seed", ItemName = "Peace Lily"},
                {ItemType = "Holdable", ItemName = "Prickly Pear"}
            },
            Cost = {CurrencyType = "SummerCoins", Amount = 18}
        },
        ["Guanabana"] = {
            Inputs = {
                {ItemType = "Seed", ItemName = "Aloe Vera"},
                {ItemType = "Seed", ItemName = "Prickly Pear"},
                {ItemType = "Holdable", ItemName = "Banana"}
            },
            Cost = {CurrencyType = "SummerCoins", Amount = 30}
        }
    }

    -- ================================================================
    -- HELPER FUNCTIONS
    -- ================================================================

    -- Function to check inventory for specific items
    local function checkInventoryForItems(recipe)
        if not recipe or not recipe.Inputs then return {} end
        
        local inventoryStatus = {}
        
        for _, input in ipairs(recipe.Inputs) do
            local itemName = input.ItemName
            local hasItem = false
            local itemCount = 0
            
            -- Check backpack for items
            if LocalPlayer.Backpack then
                for _, tool in pairs(LocalPlayer.Backpack:GetChildren()) do
                    if tool.Name:find(itemName) then
                        hasItem = true
                        -- Try to extract quantity from name (e.g., "Carrot Seed [X5]")
                        local quantityMatch = tool.Name:match("%[X(%d+)%]")
                        itemCount = itemCount + (tonumber(quantityMatch) or 1)
                    end
                end
            end
            
            table.insert(inventoryStatus, {
                ItemName = itemName,
                ItemType = input.ItemType,
                HasItem = hasItem,
                Count = itemCount
            })
        end
        
        return inventoryStatus
    end

    -- Function to check Summer Coins
    local function checkSummerCoins(requiredAmount)
        local success, currentCoins = pcall(function()
            return DataService:GetData().SpecialCurrency.SummerCoins or 0
        end)
        
        if not success then
            currentCoins = 0
        end
        
        return {
            Current = currentCoins,
            Required = requiredAmount,
            HasEnough = currentCoins >= requiredAmount
        }
    end

    -- Function to print inventory status to console
    local function printInventoryStatus(recipeName, inventoryStatus)
        print("==== INVENTORY CHECK FOR " .. recipeName .. " ====")
        for _, item in ipairs(inventoryStatus) do
            local status = item.HasItem and "‚úì HAVE" or "‚úó MISSING"
            local countText = item.HasItem and " (Count: " .. item.Count .. ")" or ""
            print(status .. " - " .. item.ItemType .. ": " .. item.ItemName .. countText)
        end
        print("================================")
    end

    -- Function to print currency status
    local function printCurrencyStatus(recipeName, coinStatus)
        print("==== CURRENCY CHECK FOR " .. recipeName .. " ====")
        local status = coinStatus.HasEnough and "‚úì HAVE ENOUGH" or "‚úó NOT ENOUGH"
        print(status .. " - Summer Coins: " .. coinStatus.Current .. "/" .. coinStatus.Required)
        print("================================")
    end

    -- Function to claim/set recipe
    local function claimRecipe(recipeName)
        local success, err = pcall(function()
            print("üî® Setting recipe:", recipeName)
            CraftingGlobalObjectService:FireServer(
                "SetRecipe",
                SeedEventCraftingWorkBench,
                "SeedEventWorkbench",
                recipeName
            )
        end)

        if success then
            print("‚úÖ Successfully set recipe:", recipeName)
            -- Library:Notify("üî® Set recipe: " .. recipeName, 3) -- Disabled notification
            return true
        else
            print("‚ùå Failed to set recipe:", err)
            -- Library:Notify("‚ùå Failed to set recipe: " .. recipeName, 3) -- Disabled notification
            return false
        end
    end

    -- Simple auto claim loop - just claim continuously
    local function autoClaimLoop()
        print("üî® Starting simple auto claim loop for:", SelectedRecipe)
        
        while AutoClaimEnabled do
            if SelectedRecipe then
                claimRecipe(SelectedRecipe)
                task.wait(3) -- Wait 3 seconds between claims
            else
                task.wait(1)
            end
        end
        print("üî® Auto claim loop ended")
    end

    -- ================================================================
    -- UI ELEMENTS
    -- ================================================================

    -- Recipe selection dropdown
    SeedCrafterGroupBox:AddDropdown("RecipeSelection", {
        Values = AvailableRecipes,
        Default = 1,
        Multi = false, -- Single selection only
        Text = "Select Recipe",
        Tooltip = "Choose which recipe to claim/set",
        Callback = function(Value)
            SelectedRecipe = Value
            print("[cb] Selected recipe:", Value)
        end,
    })

    -- Auto claim toggle
    SeedCrafterGroupBox:AddToggle("AutoClaim", {
        Text = "üî® Claim Recipe",
        Default = false,
        Tooltip = "Claim the selected recipe once when toggled on",
        Callback = function(Value)
            print("[cb] Claim Recipe toggled:", Value)
            
            if Value then
                if not SelectedRecipe then
                    print("‚ö†Ô∏è Please select a recipe first!")
                    Toggles.AutoClaim:SetValue(false)
                    return
                end

                print("üî® Claiming recipe:", SelectedRecipe)
                claimRecipe(SelectedRecipe)
                
                -- Turn toggle back off after claiming once
                Toggles.AutoClaim:SetValue(false)
            end
        end
    })

    SeedCrafterGroupBox:AddDivider()

    -- Manual inventory check button
    SeedCrafterGroupBox:AddButton("üì¶ Check Inventory", function()
        if not SelectedRecipe then
            print("‚ö†Ô∏è Please select a recipe first!")
            return
        end
        
        local recipeData = RecipeData[SelectedRecipe]
        if recipeData then
            local inventoryStatus = checkInventoryForItems(recipeData)
            printInventoryStatus(SelectedRecipe, inventoryStatus)
            
            -- Check Summer Coins
            local coinStatus = checkSummerCoins(recipeData.Cost.Amount)
            printCurrencyStatus(SelectedRecipe, coinStatus)
            
            -- Library:Notify("üì¶ Inventory check completed - see console", 3) -- Disabled notification
        else
            print("‚ö†Ô∏è Recipe data not found for:", SelectedRecipe)
            -- Library:Notify("‚ö†Ô∏è Recipe data not found!", 3) -- Disabled notification
        end
    end)

    -- Manual claim button
    SeedCrafterGroupBox:AddButton("üî® Claim Recipe Now", function()
        if not SelectedRecipe then
            print("‚ö†Ô∏è Please select a recipe first!")
            return
        end
        
        claimRecipe(SelectedRecipe)
    end)

    -- ================================================================
    -- SUCCESS MESSAGE
    -- ================================================================
    -- Library:Notify("üî® Simple Seed Crafter loaded!", 3) -- Disabled notification
    print("üî® Simple Seed Crafter initialized with " .. #AvailableRecipes .. " recipes")

    return true
end

-- ================================================================
-- AUTO-EXECUTION AND MODULE COMPATIBILITY
-- ================================================================

-- Check if this is being executed directly or loaded as a module
if getgenv and getgenv().MainScriptLoaded then
    -- Main script is already loaded, initialize immediately
    local success = initializeCrafterTab()
    if success then
        print("‚úÖ Simple Seed Crafter successfully integrated!")
    end
else
    -- Wait for main script to load, then initialize
    print("‚è≥ Waiting for main script to load...")
    
    local function waitForMainScript()
        local maxWait = 30 -- seconds
        local waited = 0
        
        while waited < maxWait do
            if getgenv and getgenv().MainScriptLoaded and Tabs and Window and Library then
                local success = initializeCrafterTab()
                if success then
                    print("‚úÖ Simple Seed Crafter successfully integrated after waiting!")
                    return true
                end
            end
            
            task.wait(0.5)
            waited = waited + 0.5
        end
        
        warn("‚ö†Ô∏è Simple Seed Crafter: Timed out waiting for main script")
        return false
    end
    
    -- Run the wait function
    task.spawn(waitForMainScript)
end

-- ================================================================
-- LOADSTRING COMPATIBILITY (for raw GitHub execution)
-- ================================================================

return {
    initialize = initializeCrafterTab,
    name = "Simple Seed Crafter",
    version = "1.0.0",
    repository = "Resn"
}
