-- ================================================================
-- RE:FACTOR EVENT TAB
-- Auto-integrates with main script when globals are available
-- ================================================================

-- Wait for main script to be ready
local function waitForMainScript()
    local maxWait = 30 -- Maximum 30 seconds
    local waited = 0
    
    while waited < maxWait do
        -- Check multiple possible global locations
        local Library = getgenv and getgenv().Library or _G.Library
        local Window = getgenv and getgenv().Window or _G.Window
        local Tabs = getgenv and getgenv().Tabs or _G.Tabs
        local MainScriptLoaded = getgenv and getgenv().MainScriptLoaded or _G.MainScriptLoaded
        
        if Library and Window and Tabs and MainScriptLoaded then
            print("‚úÖ Event Tab: Main script globals found!")
            return Library, Window, Tabs
        end
        
        task.wait(0.5)
        waited = waited + 0.5
    end
    
    error("‚ùå Event Tab: Main script not ready after " .. maxWait .. " seconds")
end

-- Get references to main script components
local Library, Window, Tabs = waitForMainScript()

-- ================================================================
-- SERVICES SETUP
-- ================================================================
local Services = {
    Workspace = game:GetService("Workspace"),
    ReplicatedStorage = game:GetService("ReplicatedStorage"),
    Players = game:GetService("Players"),
    CollectionService = game:GetService("CollectionService"),
    RunService = game:GetService("RunService")
}

local LocalPlayer = Services.Players.LocalPlayer

-- ================================================================
-- CREATE EVENT TAB
-- ================================================================
local EventTab = Window:AddTab("Event", "calendar")

-- ================================================================
-- AUTO HATCH SYSTEM
-- ================================================================
local AutoHatchGroupBox = EventTab:AddLeftGroupbox("AutoHatch ü•ö")

-- Variables for AutoHatch system
local AutoHatchEnabled = false
local BlacklistDinoEggs = false
local autoHatchConnection = nil

-- List of Dinosaur Egg names to blacklist
local DinosaurEggNames = {
    "Dinosaur Egg"
}

-- Function to check if an egg is a dinosaur egg
local function isDinosaurEgg(eggName)
    if not eggName then return false end
    
    for _, dinoEggName in pairs(DinosaurEggNames) do
        if eggName == dinoEggName then
            return true
        end
    end
    return false
end

-- Function to get all player's eggs
local function getPlayerEggs()
    local playerEggs = {}
    
    -- Get all eggs with PetEggServer tag that belong to the player
    for _, eggObject in pairs(Services.CollectionService:GetTagged("PetEggServer")) do
        if eggObject:GetAttribute("OWNER") == LocalPlayer.Name then
            table.insert(playerEggs, eggObject)
        end
    end
    
    return playerEggs
end

-- Function to check if an egg is ready to hatch
local function isEggReady(eggObject)
    -- Check if egg has READY attribute and it's true
    local ready = eggObject:GetAttribute("READY")
    local timeToHatch = eggObject:GetAttribute("TimeToHatch")
    
    -- Egg is ready if READY attribute is true OR TimeToHatch is 0 or nil
    return (ready == true) or (timeToHatch and timeToHatch <= 0)
end

-- Function to hatch an egg
local function hatchEgg(eggObject)
    -- Get the PetEggService remote event
    local PetEggService = Services.ReplicatedStorage.GameEvents:FindFirstChild("PetEggService")
    
    if PetEggService then
        -- Fire the server with "HatchPet" command and the egg object
        PetEggService:FireServer("HatchPet", eggObject)
        
        local eggName = eggObject:GetAttribute("EggName") or "Unknown Egg"
        print("ü•ö Hatched:", eggName)
        Library:Notify("ü•ö Hatched: " .. eggName, 2)
        return true
    else
        print("‚ùå PetEggService not found!")
        return false
    end
end

-- Main auto hatch function
local function performAutoHatch()
    if not AutoHatchEnabled then return end
    
    local playerEggs = getPlayerEggs()
    local hatchedCount = 0
    
    for _, eggObject in pairs(playerEggs) do
        if isEggReady(eggObject) then
            local eggName = eggObject:GetAttribute("EggName")
            
            -- Check if we should skip dinosaur eggs
            if BlacklistDinoEggs and isDinosaurEgg(eggName) then
                print("‚ö†Ô∏è Skipping Dinosaur Egg (blacklisted):", eggName)
                continue
            end
            
            -- Attempt to hatch the egg
            local success = hatchEgg(eggObject)
            if success then
                hatchedCount = hatchedCount + 1
                task.wait(0.5) -- Small delay between hatches
            end
        end
    end
    
    if hatchedCount > 0 then
        print("ü•ö Auto hatched", hatchedCount, "eggs")
    end
end

-- Auto Hatch toggle
AutoHatchGroupBox:AddToggle("AutoHatch", {
    Text = "Auto Hatch",
    Tooltip = "Automatically hatch ready eggs on your farm",
    Default = false,
    Callback = function(Value)
        AutoHatchEnabled = Value
        print("[cb] Auto Hatch toggled:", Value)
        
        if Value then
            Library:Notify("ü•ö Auto Hatch enabled!", 3)
            
            -- Start auto hatch loop
            autoHatchConnection = Services.RunService.Heartbeat:Connect(function()
                performAutoHatch()
            end)
        else
            Library:Notify("ü•ö Auto Hatch disabled!", 3)
            
            -- Stop auto hatch loop
            if autoHatchConnection then
                autoHatchConnection:Disconnect()
                autoHatchConnection = nil
            end
        end
    end,
})

-- Blacklist Dino Eggs toggle
AutoHatchGroupBox:AddToggle("BlacklistDinoEggs", {
    Text = "Blacklist Dino Eggs from Auto Hatch",
    Tooltip = "Skip dinosaur eggs when auto hatching",
    Default = false,
    Callback = function(Value)
        BlacklistDinoEggs = Value
        print("[cb] Blacklist Dino Eggs toggled:", Value)
        
        if Value then
            Library:Notify("ü¶ï Dinosaur eggs will be skipped during auto hatch", 3)
        else
            Library:Notify("ü•ö All eggs will be auto hatched (including dinosaur eggs)", 3)
        end
    end,
})

-- ================================================================
-- DINO MACHINE SYSTEM
-- ================================================================
local DinoMachineGroupBox = EventTab:AddRightGroupbox("Dino Machine ü¶ï")

-- Variables for Dino Machine system
local AutoClaimEnabled = false
local autoClaimConnection = nil

-- Function to get dino machine data
local function getDinoMachineData()
    local success, result = pcall(function()
        local DataService = require(Services.ReplicatedStorage.Modules.DataService)
        local data = DataService:GetData()
        
        if not data then
            return nil
        end
        
        if not data.DinoMachine then
            return nil
        end
        
        return data.DinoMachine
    end)
    
    if success then
        return result
    else
        print("‚ùå Failed to get dino machine data:", result)
        return nil
    end
end

-- Function to check if machine reward is ready
local function isMachineRewardReady()
    local machineData = getDinoMachineData()
    if not machineData then
        return false
    end
    
    -- Machine is ready if RewardReady is true and TimeLeft is 0 or less
    return machineData.RewardReady == true and (machineData.TimeLeft or 0) <= 0
end

-- Function to claim machine reward
local function claimMachineReward()
    local success, err = pcall(function()
        local DinoMachineService_RE = Services.ReplicatedStorage.GameEvents:FindFirstChild("DinoMachineService_RE")
        
        if DinoMachineService_RE then
            DinoMachineService_RE:FireServer("ClaimReward")
            print("üéÅ Claimed dino machine reward!")
            Library:Notify("üéÅ Claimed dino machine reward!", 2)
            return true
        else
            print("‚ùå DinoMachineService_RE not found!")
            return false
        end
    end)
    
    if not success then
        print("‚ùå Failed to claim dino machine reward:", err)
        return false
    end
    
    return success
end

-- Auto Claim toggle
DinoMachineGroupBox:AddToggle("AutoClaim", {
    Text = "Auto Claim",
    Tooltip = "Automatically claim rewards from dino machine when ready",
    Default = false,
    Callback = function(Value)
        AutoClaimEnabled = Value
        print("[cb] Auto Claim toggled:", Value)
        
        if Value then
            Library:Notify("üéÅ Auto Claim enabled!", 3)
            
            -- Start auto claim loop
            autoClaimConnection = Services.RunService.Heartbeat:Connect(function()
                performAutoClaim()
            end)
        else
            Library:Notify("üéÅ Auto Claim disabled!", 3)
            
            -- Stop auto claim loop
            if autoClaimConnection then
                autoClaimConnection:Disconnect()
                autoClaimConnection = nil
            end
        end
    end,
})

-- ================================================================
-- DINO PET EQUIP SYSTEM
-- ================================================================
local DinoGroupBox = EventTab:AddRightGroupbox("Dino ü¶ï")

-- Variables for Dino system
local DinoEquipEnabled = false
local SelectedPets = {}
local equippedPets = {}
local dinoConnection = nil

-- Common Egg pets (from PetEggs.module.lua)
local CommonEggPets = {
    "Dog",
    "Golden Lab", 
    "Bunny"
}

-- Function to find a pet tool by name pattern
local function findPetTool(container, petName)
    for _, tool in ipairs(container:GetChildren()) do
        if tool:IsA("Tool") and tool.Name:match("^" .. petName) then
            return tool
        end
    end
    return nil
end

-- Function to equip a pet
local function equipPet(petName)
    local player = Services.Players.LocalPlayer
    local backpack = player:WaitForChild("Backpack")
    local character = player.Character or player.CharacterAdded:Wait()
    
    -- Find the pet tool in backpack
    local petTool = findPetTool(backpack, petName)
    
    if petTool then
        -- Move from backpack to character (equip)
        petTool.Parent = character
        equippedPets[petName] = true
        print("ü¶ï Equipped:", petName)
        Library:Notify("ü¶ï Equipped: " .. petName, 2)
        return true
    else
        print("‚ùå Pet not found in backpack:", petName)
        return false
    end
end

-- Function to unequip a pet
local function unequipPet(petName)
    local player = Services.Players.LocalPlayer
    local backpack = player:WaitForChild("Backpack")
    local character = player.Character or player.CharacterAdded:Wait()
    
    -- Find the pet tool in character
    local petTool = findPetTool(character, petName)
    
    if petTool then
        -- Move from character to backpack (unequip)
        petTool.Parent = backpack
        equippedPets[petName] = false
        print("ü¶ï Unequipped:", petName)
        Library:Notify("ü¶ï Unequipped: " .. petName, 2)
        return true
    else
        print("‚ùå Pet not found in character:", petName)
        return false
    end
end

-- Function to manage pet equipping based on selection
local function managePetEquipping()
    if not DinoEquipEnabled then return end
    
    local player = Services.Players.LocalPlayer
    local backpack = player:WaitForChild("Backpack")
    local character = player.Character or player.CharacterAdded:Wait()
    
    -- Check each selected pet
    for petName, isSelected in pairs(SelectedPets) do
        if isSelected then
            -- Pet should be equipped
            local petInChar = findPetTool(character, petName)
            if not petInChar then
                -- Pet not equipped, try to equip it
                equipPet(petName)
            end
        else
            -- Pet should be unequipped
            local petInChar = findPetTool(character, petName)
            if petInChar then
                -- Pet is equipped, unequip it
                unequipPet(petName)
            end
        end
    end
end

-- Multi-select dropdown for pets
DinoGroupBox:AddDropdown("DinoSelectedPets", {
    Text = "Select Pets to Equip",
    Tooltip = "Choose which pets from Common Egg to auto-equip",
    Multi = true,
    Values = CommonEggPets,
    Default = {},
    Callback = function(Value)
        SelectedPets = Value
        print("[cb] Selected pets updated:", Value)
        
        -- Show selected pets in notification
        local selectedNames = {}
        for petName, isSelected in pairs(Value) do
            if isSelected then
                table.insert(selectedNames, petName)
            end
        end
        
        if #selectedNames > 0 then
            Library:Notify("ü¶ï Selected: " .. table.concat(selectedNames, ", "), 3)
        else
            Library:Notify("ü¶ï No pets selected", 2)
        end
    end,
})

-- Auto Equip toggle
DinoGroupBox:AddToggle("DinoAutoEquip", {
    Text = "Auto Equip Selected Pets",
    Tooltip = "Automatically equip the selected pets from your inventory",
    Default = false,
    Callback = function(Value)
        DinoEquipEnabled = Value
        print("[cb] Dino Auto Equip toggled:", Value)
        
        if Value then
            Library:Notify("ü¶ï Auto Equip enabled!", 3)
            
            -- Initial equip attempt
            managePetEquipping()
            
            -- Start monitoring loop
            dinoConnection = Services.RunService.Heartbeat:Connect(function()
                managePetEquipping()
            end)
        else
            Library:Notify("ü¶ï Auto Equip disabled!", 3)
            
            -- Stop monitoring loop
            if dinoConnection then
                dinoConnection:Disconnect()
                dinoConnection = nil
            end
        end
    end,
})

-- ================================================================
-- EVENT TAB INITIALIZATION COMPLETE
-- ================================================================
print("üéâ Event Tab with AutoHatch initialized successfully!")
Library:Notify("ü•ö AutoHatch Event Tab loaded!", 3)

-- Return success indicator
return true
