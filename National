-- ================================================================
-- RE:FACTOR EVENT TAB
-- Auto-integrates with main script when globals are available
-- ================================================================

-- Wait for main script to be ready
local function waitForMainScript()
    local maxWait = 30 -- Maximum 30 seconds
    local waited = 0
    
    while waited < maxWait do
        -- Check multiple possible global locations
        local Library = getgenv and getgenv().Library or _G.Library
        local Window = getgenv and getgenv().Window or _G.Window
        local Tabs = getgenv and getgenv().Tabs or _G.Tabs
        local MainScriptLoaded = getgenv and getgenv().MainScriptLoaded or _G.MainScriptLoaded
        
        if Library and Window and Tabs and MainScriptLoaded then
            print("‚úÖ Event Tab: Main script globals found!")
            return Library, Window, Tabs
        end
        
        task.wait(0.5)
        waited = waited + 0.5
    end
    
    error("‚ùå Event Tab: Main script not ready after " .. maxWait .. " seconds")
end

-- Get references to main script components
local Library, Window, Tabs = waitForMainScript()

-- ================================================================
-- SERVICES SETUP
-- ================================================================
local Services = {
    Workspace = game:GetService("Workspace"),
    ReplicatedStorage = game:GetService("ReplicatedStorage"),
    Players = game:GetService("Players"),
    CollectionService = game:GetService("CollectionService"),
    RunService = game:GetService("RunService")
}

local LocalPlayer = Services.Players.LocalPlayer

-- ================================================================
-- CREATE EVENT TAB
-- ================================================================
local EventTab = Window:AddTab("Event", "calendar")

-- ================================================================
-- AUTO HATCH SYSTEM
-- ================================================================
local AutoHatchGroupBox = EventTab:AddLeftGroupbox("AutoHatch ü•ö")

-- Variables for AutoHatch system
local AutoHatchEnabled = false
local BlacklistDinoEggs = false
local autoHatchConnection = nil

-- List of Dinosaur Egg names to blacklist
local DinosaurEggNames = {
    "Dinosaur Egg"
}

-- Function to check if an egg is a dinosaur egg
local function isDinosaurEgg(eggName)
    if not eggName then return false end
    
    for _, dinoEggName in pairs(DinosaurEggNames) do
        if eggName == dinoEggName then
            return true
        end
    end
    return false
end

-- Function to get all player's eggs
local function getPlayerEggs()
    local playerEggs = {}
    
    -- Get all eggs with PetEggServer tag that belong to the player
    for _, eggObject in pairs(Services.CollectionService:GetTagged("PetEggServer")) do
        if eggObject:GetAttribute("OWNER") == LocalPlayer.Name then
            table.insert(playerEggs, eggObject)
        end
    end
    
    return playerEggs
end

-- Function to check if an egg is ready to hatch
local function isEggReady(eggObject)
    -- Check if egg has READY attribute and it's true
    local ready = eggObject:GetAttribute("READY")
    local timeToHatch = eggObject:GetAttribute("TimeToHatch")
    
    -- Egg is ready if READY attribute is true OR TimeToHatch is 0 or nil
    return (ready == true) or (timeToHatch and timeToHatch <= 0)
end

-- Function to hatch an egg
local function hatchEgg(eggObject)
    -- Get the PetEggService remote event
    local PetEggService = Services.ReplicatedStorage.GameEvents:FindFirstChild("PetEggService")
    
    if PetEggService then
        -- Fire the server with "HatchPet" command and the egg object
        PetEggService:FireServer("HatchPet", eggObject)
        
        local eggName = eggObject:GetAttribute("EggName") or "Unknown Egg"
        print("ü•ö Hatched:", eggName)
        Library:Notify("ü•ö Hatched: " .. eggName, 2)
        return true
    else
        print("‚ùå PetEggService not found!")
        return false
    end
end

-- Main auto hatch function
local function performAutoHatch()
    if not AutoHatchEnabled then return end
    
    local playerEggs = getPlayerEggs()
    local hatchedCount = 0
    
    for _, eggObject in pairs(playerEggs) do
        if isEggReady(eggObject) then
            local eggName = eggObject:GetAttribute("EggName")
            
            -- Check if we should skip dinosaur eggs
            if BlacklistDinoEggs and isDinosaurEgg(eggName) then
                print("‚ö†Ô∏è Skipping Dinosaur Egg (blacklisted):", eggName)
                continue
            end
            
            -- Attempt to hatch the egg
            local success = hatchEgg(eggObject)
            if success then
                hatchedCount = hatchedCount + 1
                task.wait(0.5) -- Small delay between hatches
            end
        end
    end
    
    if hatchedCount > 0 then
        print("ü•ö Auto hatched", hatchedCount, "eggs")
    end
end

-- Auto Hatch toggle
AutoHatchGroupBox:AddToggle("AutoHatch", {
    Text = "Auto Hatch",
    Tooltip = "Automatically hatch ready eggs on your farm",
    Default = false,
    Callback = function(Value)
        AutoHatchEnabled = Value
        print("[cb] Auto Hatch toggled:", Value)
        
        if Value then
            Library:Notify("ü•ö Auto Hatch enabled!", 3)
            
            -- Start auto hatch loop
            autoHatchConnection = Services.RunService.Heartbeat:Connect(function()
                performAutoHatch()
            end)
        else
            Library:Notify("ü•ö Auto Hatch disabled!", 3)
            
            -- Stop auto hatch loop
            if autoHatchConnection then
                autoHatchConnection:Disconnect()
                autoHatchConnection = nil
            end
        end
    end,
})

-- Blacklist Dino Eggs toggle
AutoHatchGroupBox:AddToggle("BlacklistDinoEggs", {
    Text = "Blacklist Dino Eggs from Auto Hatch",
    Tooltip = "Skip dinosaur eggs when auto hatching",
    Default = false,
    Callback = function(Value)
        BlacklistDinoEggs = Value
        print("[cb] Blacklist Dino Eggs toggled:", Value)
        
        if Value then
            Library:Notify("ü¶ï Dinosaur eggs will be skipped during auto hatch", 3)
        else
            Library:Notify("ü•ö All eggs will be auto hatched (including dinosaur eggs)", 3)
        end
    end,
})

-- ================================================================
-- DINO MACHINE SYSTEM
-- ================================================================
local DinoMachineGroupBox = EventTab:AddRightGroupbox("Dino Machine ü¶ï")

-- Variables for Dino Machine system
local AutoClaimEnabled = false
local AutoGiveEnabled = false
local autoClaimConnection = nil
local autoGiveConnection = nil

-- Function to get dino machine data
local function getDinoMachineData()
    local success, result = pcall(function()
        local DataService = require(Services.ReplicatedStorage.Modules.DataService)
        local data = DataService:GetData()
        
        if not data then
            return nil
        end
        
        if not data.DinoMachine then
            return nil
        end
        
        return data.DinoMachine
    end)
    
    if success then
        return result
    else
        print("‚ùå Failed to get dino machine data:", result)
        return nil
    end
end

-- Function to check if machine reward is ready
local function isMachineRewardReady()
    local machineData = getDinoMachineData()
    if not machineData then
        return false
    end
    
    -- Machine is ready if RewardReady is true and TimeLeft is 0 or less
    return machineData.RewardReady == true and (machineData.TimeLeft or 0) <= 0
end

-- Function to claim machine reward
local function claimMachineReward()
    local success, err = pcall(function()
        local DinoMachineService_RE = Services.ReplicatedStorage.GameEvents:FindFirstChild("DinoMachineService_RE")
        
        if DinoMachineService_RE then
            DinoMachineService_RE:FireServer("ClaimReward")
            print("üéÅ Claimed dino machine reward!")
            Library:Notify("üéÅ Claimed dino machine reward!", 2)
            return true
        else
            print("‚ùå DinoMachineService_RE not found!")
            return false
        end
    end)
    
    if not success then
        print("‚ùå Failed to claim dino machine reward:", err)
        return false
    end
    
    return success
end

-- Main auto claim function
local function performAutoClaim()
    if not AutoClaimEnabled then return end
    
    if isMachineRewardReady() then
        claimMachineReward()
    end
end

-- Common Egg pets list (extracted from PetEggs.module.lua)
local CommonEggPets = {
    "Dog",
    "Golden Lab", 
    "Bunny"
}

-- Rare Egg pets list (extracted from PetEggs.module.lua)
local RareEggPets = {
    "Orange Tabby",
    "Monkey",
    "Spotted Deer", 
    "Rooster",
    "Pig"
}

-- Variables for Auto Give system
local SelectedCommonPets = {"Dog"} -- Default Common pets selection (multi-select)
local SelectedRarePets = {"Orange Tabby"} -- Default Rare pets selection (multi-select)
local autoGiveConnection = nil
local UseCommonEggs = true -- Default enabled
local UseRareEggs = false -- Default disabled

-- Function to get the currently selected pets based on enabled filters
local function getCurrentSelectedPets()
    local selectedPets = {}
    
    if UseCommonEggs and #SelectedCommonPets > 0 then
        for _, pet in pairs(SelectedCommonPets) do
            table.insert(selectedPets, pet)
        end
    end
    
    if UseRareEggs and #SelectedRarePets > 0 then
        for _, pet in pairs(SelectedRarePets) do
            table.insert(selectedPets, pet)
        end
    end
    
    return selectedPets
end

-- Function to check which selected pets are actually available in inventory
local function getAvailableSelectedPets()
    local availablePets = {}
    local missingPets = {}
    
    -- Check Common pets if enabled
    if UseCommonEggs and #SelectedCommonPets > 0 then
        for _, petType in pairs(SelectedCommonPets) do
            local foundPets = findPlayerPetsByType(petType)
            if #foundPets > 0 then
                table.insert(availablePets, {
                    petType = petType,
                    eggType = "Common",
                    count = #foundPets,
                    pets = foundPets
                })
            else
                table.insert(missingPets, petType .. " (Common)")
            end
        end
    end
    
    -- Check Rare pets if enabled
    if UseRareEggs and #SelectedRarePets > 0 then
        for _, petType in pairs(SelectedRarePets) do
            local foundPets = findPlayerPetsByType(petType)
            if #foundPets > 0 then
                table.insert(availablePets, {
                    petType = petType,
                    eggType = "Rare",
                    count = #foundPets,
                    pets = foundPets
                })
            else
                table.insert(missingPets, petType .. " (Rare)")
            end
        end
    end
    
    return availablePets, missingPets
end

-- Add dropdown for Common Egg pet selection
DinoMachineGroupBox:AddDropdown("CommonPetSelection", {
    Values = CommonEggPets,
    Default = {1},
    Multi = true,
    Text = "Select Common Egg Pets",
    Tooltip = "Choose which Common Egg pets to automatically give to dino machine (multi-select)",
    Callback = function(Value)
        SelectedCommonPets = {}
        for _, v in pairs(Value) do
            table.insert(SelectedCommonPets, CommonEggPets[v])
        end
        print("[cb] Selected Common pets to give:", table.concat(SelectedCommonPets, ", "))
        
        -- Check inventory for newly selected pets
        if #SelectedCommonPets > 0 then
            local availableCount = 0
            local totalSelected = #SelectedCommonPets
            
            for _, petType in pairs(SelectedCommonPets) do
                local foundPets = findPlayerPetsByType(petType)
                if #foundPets > 0 then
                    availableCount = availableCount + 1
                end
            end
            
            if availableCount == totalSelected then
                Library:Notify("‚úÖ All selected Common pets available! (" .. availableCount .. "/" .. totalSelected .. ")", 2)
            else
                Library:Notify("‚ö†Ô∏è Only " .. availableCount .. "/" .. totalSelected .. " Common pets available in inventory", 3)
            end
        end
    end,
})

-- Add dropdown for Rare Egg pet selection
DinoMachineGroupBox:AddDropdown("RarePetSelection", {
    Values = RareEggPets,
    Default = {1},
    Multi = true,
    Text = "Select Rare Egg Pets",
    Tooltip = "Choose which Rare Egg pets to automatically give to dino machine (multi-select)",
    Callback = function(Value)
        SelectedRarePets = {}
        for _, v in pairs(Value) do
            table.insert(SelectedRarePets, RareEggPets[v])
        end
        print("[cb] Selected Rare pets to give:", table.concat(SelectedRarePets, ", "))
        
        -- Check inventory for newly selected pets
        if #SelectedRarePets > 0 then
            local availableCount = 0
            local totalSelected = #SelectedRarePets
            
            for _, petType in pairs(SelectedRarePets) do
                local foundPets = findPlayerPetsByType(petType)
                if #foundPets > 0 then
                    availableCount = availableCount + 1
                end
            end
            
            if availableCount == totalSelected then
                Library:Notify("‚úÖ All selected Rare pets available! (" .. availableCount .. "/" .. totalSelected .. ")", 2)
            else
                Library:Notify("‚ö†Ô∏è Only " .. availableCount .. "/" .. totalSelected .. " Rare pets available in inventory", 3)
            end
        end
    end,
})

DinoMachineGroupBox:AddDivider()

-- Add inventory check button
DinoMachineGroupBox:AddButton("Check Pet Inventory", function()
    print("üîç === ENHANCED PET INVENTORY CHECK ===")
    
    -- Test the enhanced findPlayerPetsByType function
    print("Testing search for 'Dog' pets:")
    local dogPets = findPlayerPetsByType("Dog")
    print("Dog pets found:", #dogPets)
    
    print("\nTesting search for 'Bunny' pets:")
    local bunnyPets = findPlayerPetsByType("Bunny")
    print("Bunny pets found:", #bunnyPets)
    
    -- Now check the full selected pets function
    print("\n=== CHECKING SELECTED PETS ===")
    local availablePets, missingPets = getAvailableSelectedPets()
    
    if #availablePets > 0 then
        local inventoryText = "üì¶ Available Selected Pets:\n"
        for _, petInfo in pairs(availablePets) do
            inventoryText = inventoryText .. "‚Ä¢ " .. petInfo.petType .. " (" .. petInfo.count .. " " .. petInfo.eggType .. ")\n"
        end
        
        if #missingPets > 0 then
            inventoryText = inventoryText .. "\n‚ùå Missing Selected Pets:\n"
            for _, missingPet in pairs(missingPets) do
                inventoryText = inventoryText .. "‚Ä¢ " .. missingPet .. "\n"
            end
        end
        
        print(inventoryText)
        Library:Notify("üì¶ Check console for detailed inventory info", 4)
    else
        local message = "‚ùå No selected pets found in inventory!"
        if #missingPets > 0 then
            message = message .. "\nMissing: " .. table.concat(missingPets, ", ")
        end
        print(message)
        Library:Notify(message, 4)
    end
    
    print("=== END INVENTORY CHECK ===")
end)

-- Add debug button to inspect data structure
DinoMachineGroupBox:AddButton("Debug Pet Data", function()
    local success, result = pcall(function()
        local DataService = require(Services.ReplicatedStorage.Modules.DataService)
        local data = DataService:GetData()
        
        print("üîç DEBUG: Player data structure:")
        if data then
            print("‚úÖ Player data exists")
            
            -- Check pet storage location
            if data.PetsData and data.PetsData.PetInventory and data.PetsData.PetInventory.Data then
                print("‚úÖ PetInventory.Data exists")
                local count = 0
                local dogFound = false
                local bunnyFound = false
                
                for uuid, petData in pairs(data.PetsData.PetInventory.Data) do
                    count = count + 1
                    if count <= 5 then -- Show first 5 pets
                        print("üêæ Pet", count .. ":", petData.PetType or "Unknown", "UUID:", uuid)
                    end
                    
                    -- Check for our target pets
                    if petData.PetType == "Dog" then
                        dogFound = true
                    elseif petData.PetType == "Bunny" then
                        bunnyFound = true
                    end
                end
                
                print("üì¶ Total pets in PetInventory.Data:", count)
                print("üêï Dog found:", dogFound and "YES" or "NO")
                print("ÔøΩ Bunny found:", bunnyFound and "YES" or "NO")
                
                if count > 5 then
                    print("... and", count - 5, "more pets")
                end
            else
                print("‚ùå PetInventory.Data not accessible")
            end
        else
            print("‚ùå No player data found!")
        end
        
        Library:Notify("üîç Debug info printed to console", 3)
    end)
    
    if not success then
        print("‚ùå Debug failed:", result)
        Library:Notify("‚ùå Debug failed! Check console", 3)
    end
end)

-- Add toggles for egg type filters
DinoMachineGroupBox:AddToggle("UseCommonEggs", {
    Text = "Use Common Egg Pets",
    Tooltip = "Enable auto giving of selected Common Egg pet",
    Default = true,
    Callback = function(Value)
        UseCommonEggs = Value
        print("[cb] Use Common Eggs toggled:", Value)
        
        if Value then
            Library:Notify("‚úÖ Common Egg pets enabled: " .. table.concat(SelectedCommonPets, ", "), 2)
        else
            Library:Notify("‚ùå Common Egg pets disabled", 2)
        end
    end,
})

DinoMachineGroupBox:AddToggle("UseRareEggs", {
    Text = "Use Rare Egg Pets", 
    Tooltip = "Enable auto giving of selected Rare Egg pet",
    Default = false,
    Callback = function(Value)
        UseRareEggs = Value
        print("[cb] Use Rare Eggs toggled:", Value)
        
        if Value then
            Library:Notify("‚úÖ Rare Egg pets enabled: " .. table.concat(SelectedRarePets, ", "), 2)
        else
            Library:Notify("‚ùå Rare Egg pets disabled", 2)
        end
    end,
})

-- Function to check if dino machine is empty (ready to accept pets)
local function isMachineEmpty()
    local machineData = getDinoMachineData()
    if not machineData then
        return false
    end
    
    -- Machine is empty if it's not running and reward is not ready
    return not machineData.IsRunning and not machineData.RewardReady
end

-- Function to find player's pets by type
local function findPlayerPetsByType(petType)
    local foundPets = {}
    
    local success, result = pcall(function()
        local DataService = require(Services.ReplicatedStorage.Modules.DataService)
        local data = DataService:GetData()
        
        if not data then
            print("‚ùå DEBUG: No player data available")
            return {}
        end
        
        -- Direct search in PetsData.PetInventory.Data where we know pets exist
        if data.PetsData and data.PetsData.PetInventory and data.PetsData.PetInventory.Data then
            local petInventory = data.PetsData.PetInventory.Data
            
            -- Count total pets properly
            local totalPetCount = 0
            for _ in pairs(petInventory) do
                totalPetCount = totalPetCount + 1
            end
            
            print("üîç DEBUG: Searching for petType:", petType, "in inventory with", totalPetCount, "pets")
            
            local searchCount = 0
            for petUUID, petData in pairs(petInventory) do
                searchCount = searchCount + 1
                if petData and petData.PetType then
                    -- Debug: Show each pet type we're checking
                    if searchCount <= 3 then -- Only show first 3 for brevity
                        print("   üêæ Checking pet", searchCount .. ":", petData.PetType, "vs target:", petType)
                    end
                    
                    if petData.PetType == petType then
                        print("‚úÖ DEBUG: Found matching pet!", petType, "UUID:", petUUID)
                        table.insert(foundPets, {
                            uuid = petUUID,
                            petType = petData.PetType,
                            petData = petData
                        })
                    end
                else
                    print("‚ö†Ô∏è DEBUG: Pet data incomplete for UUID:", petUUID)
                end
            end
            
            print("üîç DEBUG: Search complete. Found", #foundPets, "pets of type:", petType)
        else
            print("‚ùå DEBUG: PetInventory.Data not accessible")
        end
        
        return foundPets
    end)
    
    if success then
        return result
    else
        print("‚ùå Failed to get pets from inventory:", result)
        return {}
    end
end

-- Function to get Pet Services (like REfactoreMian)
local function getPetServices()
    local success, result = pcall(function()
        if Services.ReplicatedStorage:FindFirstChild("Modules") and Services.ReplicatedStorage.Modules:FindFirstChild("PetServices") then
            local PetServices = Services.ReplicatedStorage.Modules.PetServices
            local ActivePetsService = require(PetServices:FindFirstChild("ActivePetsService"))
            local PetsService = require(PetServices:FindFirstChild("PetsService"))
            return {
                ActivePetsService = ActivePetsService,
                PetsService = PetsService,
            }
        end
        return nil
    end)
    if success then
        return result
    else
        return nil
    end
end

-- Function to equip a pet (fixed to use proper PetsService module)
local function equipPet(petUUID)
    local success, err = pcall(function()
        local petServices = getPetServices()
        
        if petServices and petServices.PetsService then
            -- Use the PetsService module's EquipPet method
            -- Based on the module signature: EquipPet(arg1, arg2, arg3)
            -- arg1 = self, arg2 = petUUID, arg3 = unknown (try nil or empty)
            petServices.PetsService:EquipPet(petUUID, nil)
            print("üéí Equipped pet:", petUUID)
            return true
        else
            print("‚ùå PetsService module not found!")
            return false
        end
    end)
    
    if not success then
        print("‚ùå Failed to equip pet:", err)
        return false
    end
    
    return success
end

-- Function to give pet to dino machine
local function givePetToMachine(petUUID)
    local success, err = pcall(function()
        local DinoMachineService_RE = Services.ReplicatedStorage.GameEvents:FindFirstChild("DinoMachineService_RE")
        
        if DinoMachineService_RE then
            DinoMachineService_RE:FireServer("MachineInteract", petUUID)
            print("ü¶ï Gave pet to dino machine:", petUUID)
            return true
        else
            print("‚ùå DinoMachineService_RE not found!")
            return false
        end
    end)
    
    if not success then
        print("‚ùå Failed to give pet to dino machine:", err)
        return false
    end
    
    return success
end

-- Main auto equip and give function
local function performAutoGive()
    if not AutoGiveEnabled then return end
    
    -- Only give pets when machine is empty
    if not isMachineEmpty() then
        return
    end
    
    -- Get available pets from inventory
    local availablePets, missingPets = getAvailableSelectedPets()
    
    -- Warn about missing pets (but don't spam)
    if #missingPets > 0 then
        print("‚ö†Ô∏è Selected pets not found in inventory:", table.concat(missingPets, ", "))
    end
    
    -- Try to auto-equip and give available pets in order (Common first, then Rare)
    for _, petInfo in pairs(availablePets) do
        if #petInfo.pets > 0 then
            -- Give the first available pet of this type
            local petToGive = petInfo.pets[1]
            
            -- First, try to equip the pet
            print("üéí Auto-equipping", petInfo.eggType, "pet:", petInfo.petType)
            local equipSuccess = equipPet(petToGive.uuid)
            
            if equipSuccess then
                -- Wait a moment for equip to process
                task.wait(1)
                
                -- Then give the pet to the machine
                local giveSuccess = givePetToMachine(petToGive.uuid)
                
                if giveSuccess then
                    print("ü¶ï Successfully auto-equipped and gave", petInfo.eggType, "pet:", petInfo.petType, "(" .. petInfo.count .. " available)")
                    Library:Notify("ü¶ï Auto-equipped and gave " .. petInfo.petType .. " to dino machine!", 3)
                    task.wait(2) -- Add delay to prevent spam
                    return -- Exit after successfully giving one pet
                else
                    print("‚ùå Failed to give equipped pet to machine")
                end
            else
                print("‚ùå Failed to equip pet, skipping...")
            end
        end
    end
    
    -- If we reach here, no pets were available to give
    if #availablePets == 0 then
        print("‚ö†Ô∏è No selected pets available in inventory!")
    end
end

DinoMachineGroupBox:AddDivider()

-- Auto Give toggle
DinoMachineGroupBox:AddToggle("AutoGive", {
    Text = "Auto Equip & Give",
    Tooltip = "Automatically equip and give selected pets to dino machine when empty",
    Default = false,
    Callback = function(Value)
        AutoGiveEnabled = Value
        print("[cb] Auto Give toggled:", Value)
        
        if Value then
            -- Check if at least one egg type is enabled
            if not UseCommonEggs and not UseRareEggs then
                Library:Notify("‚ö†Ô∏è Please enable at least one egg type filter first!", 3)
                task.wait(0.1)
                if Toggles and Toggles.AutoGive then
                    Toggles.AutoGive:SetValue(false)
                end
                return
            end
            
            -- Check if valid pets are selected for enabled egg types
            local validSelection = false
            local enabledPets = {}
            
            if UseCommonEggs and #SelectedCommonPets > 0 then
                validSelection = true
                for _, pet in pairs(SelectedCommonPets) do
                    table.insert(enabledPets, pet .. " (Common)")
                end
            end
            
            if UseRareEggs and #SelectedRarePets > 0 then
                validSelection = true
                for _, pet in pairs(SelectedRarePets) do
                    table.insert(enabledPets, pet .. " (Rare)")
                end
            end
            
            if not validSelection then
                Library:Notify("‚ö†Ô∏è Please select pets for enabled egg types!", 3)
                task.wait(0.1)
                if Toggles and Toggles.AutoGive then
                    Toggles.AutoGive:SetValue(false)
                end
                return
            end
            
            -- Check inventory for selected pets
            local availablePets, missingPets = getAvailableSelectedPets()
            
            if #availablePets == 0 then
                Library:Notify("‚ùå None of the selected pets are in your inventory!", 4)
                task.wait(0.1)
                if Toggles and Toggles.AutoGive then
                    Toggles.AutoGive:SetValue(false)
                end
                return
            end
            
            if #missingPets > 0 then
                Library:Notify("‚ö†Ô∏è Some selected pets not found: " .. table.concat(missingPets, ", "), 4)
            end
            
            -- Show available pets
            local availablePetNames = {}
            for _, petInfo in pairs(availablePets) do
                table.insert(availablePetNames, petInfo.petType .. " (" .. petInfo.count .. " " .. petInfo.eggType .. ")")
            end
            
            local petsText = table.concat(availablePetNames, ", ")
            Library:Notify("üîÑ Auto Equip & Give enabled for: " .. petsText, 4)
            
            -- Start auto give loop
            autoGiveConnection = Services.RunService.Heartbeat:Connect(function()
                performAutoGive()
            end)
        else
            Library:Notify("üîÑ Auto Equip & Give disabled!", 3)
            
            -- Stop auto give loop
            if autoGiveConnection then
                autoGiveConnection:Disconnect()
                autoGiveConnection = nil
            end
        end
    end,
})

-- Auto Claim toggle
DinoMachineGroupBox:AddToggle("AutoClaim", {
    Text = "Auto Claim",
    Tooltip = "Automatically claim rewards from dino machine when ready",
    Default = false,
    Callback = function(Value)
        AutoClaimEnabled = Value
        print("[cb] Auto Claim toggled:", Value)
        
        if Value then
            Library:Notify("üéÅ Auto Claim enabled!", 3)
            
            -- Start auto claim loop
            autoClaimConnection = Services.RunService.Heartbeat:Connect(function()
                performAutoClaim()
            end)
        else
            Library:Notify("üéÅ Auto Claim disabled!", 3)
            
            -- Stop auto claim loop
            if autoClaimConnection then
                autoClaimConnection:Disconnect()
                autoClaimConnection = nil
            end
        end
    end,
})

-- ================================================================
-- EVENT TAB INITIALIZATION COMPLETE
-- ================================================================
print("üéâ Event Tab with AutoHatch initialized successfully!")
Library:Notify("ü•ö AutoHatch Event Tab loaded!", 3)

-- Return success indicator
return true
