-- ================================================================
-- RE:FACTOR EVENT TAB
-- Auto-integrates with main script when globals are available
-- ================================================================

-- Wait for main script to be ready
local function waitForMainScript()
    local maxWait = 30 -- Maximum 30 seconds
    local waited = 0
    
    while waited < maxWait do
        -- Check multiple possible global locations
        local Library = getgenv and getgenv().Library or _G.Library
        local Window = getgenv and getgenv().Window or _G.Window
        local Tabs = getgenv and getgenv().Tabs or _G.Tabs
        local MainScriptLoaded = getgenv and getgenv().MainScriptLoaded or _G.MainScriptLoaded
        
        if Library and Window and Tabs and MainScriptLoaded then
            print("‚úÖ Event Tab: Main script globals found!")
            return Library, Window, Tabs
        end
        
        task.wait(0.5)
        waited = waited + 0.5
    end
    
    error("‚ùå Event Tab: Main script not ready after " .. maxWait .. " seconds")
end

-- Get references to main script components
local Library, Window, Tabs = waitForMainScript()

-- ================================================================
-- SERVICES SETUP
-- ================================================================
local Services = {
    Workspace = game:GetService("Workspace"),
    ReplicatedStorage = game:GetService("ReplicatedStorage"),
    Players = game:GetService("Players"),
    CollectionService = game:GetService("CollectionService"),
    RunService = game:GetService("RunService")
}

local LocalPlayer = Services.Players.LocalPlayer

-- ================================================================
-- CREATE EVENT TAB
-- ================================================================
local EventTab = Window:AddTab("Event", "calendar")

-- ================================================================
-- AUTO HATCH SYSTEM
-- ================================================================
local AutoHatchGroupBox = EventTab:AddLeftGroupbox("AutoHatch ü•ö")

-- Variables for AutoHatch system
local AutoHatchEnabled = false
local BlacklistDinoEggs = false
local autoHatchConnection = nil

-- List of Dinosaur Egg names to blacklist
local DinosaurEggNames = {
    "Dinosaur Egg"
}

-- Function to check if an egg is a dinosaur egg
local function isDinosaurEgg(eggName)
    if not eggName then return false end
    
    for _, dinoEggName in pairs(DinosaurEggNames) do
        if eggName == dinoEggName then
            return true
        end
    end
    return false
end

-- Function to get all player's eggs
local function getPlayerEggs()
    local playerEggs = {}
    
    -- Get all eggs with PetEggServer tag that belong to the player
    for _, eggObject in pairs(Services.CollectionService:GetTagged("PetEggServer")) do
        if eggObject:GetAttribute("OWNER") == LocalPlayer.Name then
            table.insert(playerEggs, eggObject)
        end
    end
    
    return playerEggs
end

-- Function to check if an egg is ready to hatch
local function isEggReady(eggObject)
    -- Check if egg has READY attribute and it's true
    local ready = eggObject:GetAttribute("READY")
    local timeToHatch = eggObject:GetAttribute("TimeToHatch")
    
    -- Egg is ready if READY attribute is true OR TimeToHatch is 0 or nil
    return (ready == true) or (timeToHatch and timeToHatch <= 0)
end

-- Function to hatch an egg
local function hatchEgg(eggObject)
    -- Get the PetEggService remote event
    local PetEggService = Services.ReplicatedStorage.GameEvents:FindFirstChild("PetEggService")
    
    if PetEggService then
        -- Fire the server with "HatchPet" command and the egg object
        PetEggService:FireServer("HatchPet", eggObject)
        
        local eggName = eggObject:GetAttribute("EggName") or "Unknown Egg"
        print("ü•ö Hatched:", eggName)
        Library:Notify("ü•ö Hatched: " .. eggName, 2)
        return true
    else
        print("‚ùå PetEggService not found!")
        return false
    end
end

-- Main auto hatch function
local function performAutoHatch()
    if not AutoHatchEnabled then return end
    
    local playerEggs = getPlayerEggs()
    local hatchedCount = 0
    
    for _, eggObject in pairs(playerEggs) do
        if isEggReady(eggObject) then
            local eggName = eggObject:GetAttribute("EggName")
            
            -- Check if we should skip dinosaur eggs
            if BlacklistDinoEggs and isDinosaurEgg(eggName) then
                print("‚ö†Ô∏è Skipping Dinosaur Egg (blacklisted):", eggName)
                continue
            end
            
            -- Attempt to hatch the egg
            local success = hatchEgg(eggObject)
            if success then
                hatchedCount = hatchedCount + 1
                task.wait(0.5) -- Small delay between hatches
            end
        end
    end
    
    if hatchedCount > 0 then
        print("ü•ö Auto hatched", hatchedCount, "eggs")
    end
end

-- Auto Hatch toggle
AutoHatchGroupBox:AddToggle("AutoHatch", {
    Text = "Auto Hatch",
    Tooltip = "Automatically hatch ready eggs on your farm",
    Default = false,
    Callback = function(Value)
        AutoHatchEnabled = Value
        print("[cb] Auto Hatch toggled:", Value)
        
        if Value then
            Library:Notify("ü•ö Auto Hatch enabled!", 3)
            
            -- Start auto hatch loop
            autoHatchConnection = Services.RunService.Heartbeat:Connect(function()
                performAutoHatch()
            end)
        else
            Library:Notify("ü•ö Auto Hatch disabled!", 3)
            
            -- Stop auto hatch loop
            if autoHatchConnection then
                autoHatchConnection:Disconnect()
                autoHatchConnection = nil
            end
        end
    end,
})

-- Blacklist Dino Eggs toggle
AutoHatchGroupBox:AddToggle("BlacklistDinoEggs", {
    Text = "Blacklist Dino Eggs from Auto Hatch",
    Tooltip = "Skip dinosaur eggs when auto hatching",
    Default = false,
    Callback = function(Value)
        BlacklistDinoEggs = Value
        print("[cb] Blacklist Dino Eggs toggled:", Value)
        
        if Value then
            Library:Notify("ü¶ï Dinosaur eggs will be skipped during auto hatch", 3)
        else
            Library:Notify("ü•ö All eggs will be auto hatched (including dinosaur eggs)", 3)
        end
    end,
})

-- ================================================================
-- DINO MACHINE SYSTEM
-- ================================================================
local DinoMachineGroupBox = EventTab:AddRightGroupbox("Dino Machine ü¶ï")

-- Variables for Dino Machine system
local AutoClaimEnabled = false
local autoClaimConnection = nil

-- Function to get dino machine data
local function getDinoMachineData()
    local success, result = pcall(function()
        local DataService = require(Services.ReplicatedStorage.Modules.DataService)
        local data = DataService:GetData()
        
        if not data then
            return nil
        end
        
        if not data.DinoMachine then
            return nil
        end
        
        return data.DinoMachine
    end)
    
    if success then
        return result
    else
        print("‚ùå Failed to get dino machine data:", result)
        return nil
    end
end

-- Function to check if machine reward is ready
local function isMachineRewardReady()
    local machineData = getDinoMachineData()
    if not machineData then
        return false
    end
    
    -- Machine is ready if RewardReady is true and TimeLeft is 0 or less
    return machineData.RewardReady == true and (machineData.TimeLeft or 0) <= 0
end

-- Function to claim machine reward
local function claimMachineReward()
    local success, err = pcall(function()
        local DinoMachineService_RE = Services.ReplicatedStorage.GameEvents:FindFirstChild("DinoMachineService_RE")
        
        if DinoMachineService_RE then
            DinoMachineService_RE:FireServer("ClaimReward")
            print("üéÅ Claimed dino machine reward!")
            Library:Notify("üéÅ Claimed dino machine reward!", 2)
            return true
        else
            print("‚ùå DinoMachineService_RE not found!")
            return false
        end
    end)
    
    if not success then
        print("‚ùå Failed to claim dino machine reward:", err)
        return false
    end
    
    return success
end

-- Main auto claim function
local function performAutoClaim()
    if not AutoClaimEnabled then return end
    
    if isMachineRewardReady() then
        claimMachineReward()
    end
end

-- ================================================================
-- AUTO GIVE PETS SYSTEM
-- ================================================================

-- Complete list of all pets from PetRegistry.PetList
local AllPets = {
    "Dog", "Golden Lab", "Bunny", "Black Bunny", "Cat", "Deer", "Chicken", 
    "Orange Tabby", "Spotted Deer", "Rooster", "Monkey", "Pig", "Silver Monkey",
    "Turtle", "Cow", "Sea Otter", "Polar Bear", "Caterpillar", "Snail", 
    "Giant Ant", "Praying Mantis", "Dragonfly", "Panda", "Hedgehog", "Kiwi", 
    "Mole", "Frog", "Echo Frog", "Raccoon", "Night Owl", "Owl", "Grey Mouse", 
    "Squirrel", "Brown Mouse", "Red Giant Ant", "Red Fox", "Chicken Zombie", 
    "Blood Hedgehog", "Blood Kiwi", "Blood Owl", "Moon Cat", "Honey Bee"
}

-- Variables for Auto Give system
local AutoGiveEnabled = false
local SelectedPetsToGive = {"Dog"} -- Default selection
local autoGiveConnection = nil

-- Function to find player's pets by type
local function findPlayerPetsByType(petType)
    local foundPets = {}
    
    local success, result = pcall(function()
        local DataService = require(Services.ReplicatedStorage.Modules.DataService)
        local data = DataService:GetData()
        
        if not data then
            return {}
        end
        
        -- Search in PetsData.PetInventory.Data
        if data.PetsData and data.PetsData.PetInventory and data.PetsData.PetInventory.Data then
            local petInventory = data.PetsData.PetInventory.Data
            
            for petUUID, petData in pairs(petInventory) do
                if petData and petData.PetType and petData.PetType == petType then
                    table.insert(foundPets, {
                        uuid = petUUID,
                        petType = petData.PetType,
                        petData = petData
                    })
                end
            end
        end
        
        return foundPets
    end)
    
    if success then
        return result
    else
        print("‚ùå Failed to get pets from inventory:", result)
        return {}
    end
end

-- Function to equip a pet
local function equipPet(petUUID)
    local success, err = pcall(function()
        local PetsService = Services.ReplicatedStorage.GameEvents:FindFirstChild("PetsService")
        if PetsService then
            PetsService:FireServer("EquipPet", petUUID)
            print("üéí Equipped pet:", petUUID)
            return true
        else
            print("‚ùå PetsService not found!")
            return false
        end
    end)
    
    if not success then
        print("‚ùå Failed to equip pet:", err)
        return false
    end
    
    return success
end

-- Function to give pet to dino machine (using the provided remote)
local function givePetToMachine()
    local success, err = pcall(function()
        local DinoMachineService_RE = Services.ReplicatedStorage.GameEvents:FindFirstChild("DinoMachineService_RE")
        
        if DinoMachineService_RE then
            DinoMachineService_RE:FireServer("MachineInteract")
            print("ü¶ï Gave pet to dino machine!")
            return true
        else
            print("‚ùå DinoMachineService_RE not found!")
            return false
        end
    end)
    
    if not success then
        print("‚ùå Failed to give pet to dino machine:", err)
        return false
    end
    
    return success
end

-- Function to check if dino machine is empty (ready to accept pets)
local function isMachineEmpty()
    local machineData = getDinoMachineData()
    if not machineData then
        return false
    end
    
    -- Machine is empty if it's not running and reward is not ready
    return not machineData.IsRunning and not machineData.RewardReady
end

-- Function to get available selected pets from inventory
local function getAvailableSelectedPets()
    local availablePets = {}
    local missingPets = {}
    
    for _, petType in pairs(SelectedPetsToGive) do
        local foundPets = findPlayerPetsByType(petType)
        if #foundPets > 0 then
            table.insert(availablePets, {
                petType = petType,
                count = #foundPets,
                pets = foundPets
            })
        else
            table.insert(missingPets, petType)
        end
    end
    
    return availablePets, missingPets
end

-- Main auto give function
local function performAutoGive()
    if not AutoGiveEnabled then return end
    
    -- Only give pets when machine is empty
    if not isMachineEmpty() then
        return
    end
    
    -- Get available pets from inventory
    local availablePets, missingPets = getAvailableSelectedPets()
    
    if #availablePets == 0 then
        print("‚ö†Ô∏è No selected pets available in inventory!")
        return
    end
    
    -- Step 1: Equip ALL selected pets first
    local equippedPets = {}
    print("üéí Equipping all selected pets...")
    
    for _, petInfo in pairs(availablePets) do
        for _, pet in pairs(petInfo.pets) do
            print("üéí Equipping pet:", petInfo.petType, "UUID:", pet.uuid)
            local equipSuccess = equipPet(pet.uuid)
            
            if equipSuccess then
                table.insert(equippedPets, {
                    petType = petInfo.petType,
                    uuid = pet.uuid
                })
                task.wait(0.5) -- Small delay between equips
            else
                print("‚ùå Failed to equip pet:", petInfo.petType)
            end
        end
    end
    
    -- Step 2: If we equipped any pets, run the MachineInteract remote
    if #equippedPets > 0 then
        print("ü¶ï Successfully equipped", #equippedPets, "pets. Running MachineInteract...")
        
        -- Wait a moment for all equips to process
        task.wait(1)
        
        -- Run the MachineInteract remote
        local giveSuccess = givePetToMachine()
        
        if giveSuccess then
            local petNames = {}
            for _, pet in pairs(equippedPets) do
                table.insert(petNames, pet.petType)
            end
            
            print("ü¶ï Successfully gave", #equippedPets, "pets to dino machine:", table.concat(petNames, ", "))
            Library:Notify("ü¶ï Gave " .. #equippedPets .. " pets (" .. table.concat(petNames, ", ") .. ") to dino machine!", 4)
            task.wait(3) -- Add delay to prevent spam
        else
            print("‚ùå Failed to give equipped pets to machine")
            Library:Notify("‚ùå Failed to give equipped pets to dino machine", 3)
        end
    else
        print("‚ùå No pets were equipped successfully!")
        Library:Notify("‚ùå No pets were equipped successfully!", 3)
    end
end

-- Pet selection dropdown (multi-select)
DinoMachineGroupBox:AddDropdown("PetSelection", {
    Values = AllPets,
    Default = {1}, -- Default to "Dog"
    Multi = true,
    Text = "Select Pets to Give",
    Tooltip = "Choose which pets to automatically equip and give to dino machine (multi-select)",
    Callback = function(Value)
        SelectedPetsToGive = {}
        for _, v in pairs(Value) do
            table.insert(SelectedPetsToGive, AllPets[v])
        end
        print("[cb] Selected pets to give:", table.concat(SelectedPetsToGive, ", "))
        
        -- Check inventory for newly selected pets
        if #SelectedPetsToGive > 0 then
            local availablePets, missingPets = getAvailableSelectedPets()
            
            if #availablePets > 0 then
                local availableNames = {}
                for _, petInfo in pairs(availablePets) do
                    table.insert(availableNames, petInfo.petType .. " (" .. petInfo.count .. ")")
                end
                Library:Notify("‚úÖ Available: " .. table.concat(availableNames, ", "), 3)
            end
            
            if #missingPets > 0 then
                Library:Notify("‚ö†Ô∏è Missing: " .. table.concat(missingPets, ", "), 3)
            end
        end
    end,
})

DinoMachineGroupBox:AddDivider()

-- Auto Give toggle
DinoMachineGroupBox:AddToggle("AutoGive", {
    Text = "Auto Equip & Give",
    Tooltip = "Automatically equip and give selected pets to dino machine when empty",
    Default = false,
    Callback = function(Value)
        AutoGiveEnabled = Value
        print("[cb] Auto Give toggled:", Value)
        
        if Value then
            -- Check if any pets are selected
            if #SelectedPetsToGive == 0 then
                Library:Notify("‚ö†Ô∏è Please select pets to give first!", 3)
                task.wait(0.1)
                if Toggles and Toggles.AutoGive then
                    Toggles.AutoGive:SetValue(false)
                end
                return
            end
            
            -- Check inventory for selected pets
            local availablePets, missingPets = getAvailableSelectedPets()
            
            if #availablePets == 0 then
                Library:Notify("‚ùå None of the selected pets are in your inventory!", 4)
                task.wait(0.1)
                if Toggles and Toggles.AutoGive then
                    Toggles.AutoGive:SetValue(false)
                end
                return
            end
            
            if #missingPets > 0 then
                Library:Notify("‚ö†Ô∏è Some selected pets not found: " .. table.concat(missingPets, ", "), 4)
            end
            
            -- Show available pets
            local availablePetNames = {}
            for _, petInfo in pairs(availablePets) do
                table.insert(availablePetNames, petInfo.petType .. " (" .. petInfo.count .. ")")
            end
            
            local petsText = table.concat(availablePetNames, ", ")
            Library:Notify("üîÑ Auto Equip & Give enabled for: " .. petsText, 4)
            
            -- Start auto give loop
            autoGiveConnection = Services.RunService.Heartbeat:Connect(function()
                performAutoGive()
            end)
        else
            Library:Notify("üîÑ Auto Equip & Give disabled!", 3)
            
            -- Stop auto give loop
            if autoGiveConnection then
                autoGiveConnection:Disconnect()
                autoGiveConnection = nil
            end
        end
    end,
})

DinoMachineGroupBox:AddDivider()

-- Auto Claim toggle
DinoMachineGroupBox:AddToggle("AutoClaim", {
    Text = "Auto Claim",
    Tooltip = "Automatically claim rewards from dino machine when ready",
    Default = false,
    Callback = function(Value)
        AutoClaimEnabled = Value
        print("[cb] Auto Claim toggled:", Value)
        
        if Value then
            Library:Notify("üéÅ Auto Claim enabled!", 3)
            
            -- Start auto claim loop
            autoClaimConnection = Services.RunService.Heartbeat:Connect(function()
                performAutoClaim()
            end)
        else
            Library:Notify("üéÅ Auto Claim disabled!", 3)
            
            -- Stop auto claim loop
            if autoClaimConnection then
                autoClaimConnection:Disconnect()
                autoClaimConnection = nil
            end
        end
    end,
})

-- ================================================================
-- EVENT TAB INITIALIZATION COMPLETE
-- ================================================================
print("üéâ Event Tab with AutoHatch initialized successfully!")
Library:Notify("ü•ö AutoHatch Event Tab loaded!", 3)

-- Return success indicator
return true
