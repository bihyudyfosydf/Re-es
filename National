-- ================================================================
-- RE:FACTOR EVENT TAB
-- Auto-integrates with main script when globals are available
-- ================================================================

-- Wait for main script to be ready
local function waitForMainScript()
    local maxWait = 30 -- Maximum 30 seconds
    local waited = 0
    
    while waited < maxWait do
        -- Check multiple possible global locations
        local Library = getgenv and getgenv().Library or _G.Library
        local Window = getgenv and getgenv().Window or _G.Window
        local Tabs = getgenv and getgenv().Tabs or _G.Tabs
        local MainScriptLoaded = getgenv and getgenv().MainScriptLoaded or _G.MainScriptLoaded
        
        if Library and Window and Tabs and MainScriptLoaded then
            print("‚úÖ Event Tab: Main script globals found!")
            return Library, Window, Tabs
        end
        
        task.wait(0.5)
        waited = waited + 0.5
    end
    
    error("‚ùå Event Tab: Main script not ready after " .. maxWait .. " seconds")
end

-- Get references to main script components
local Library, Window, Tabs = waitForMainScript()

-- ================================================================
-- SERVICES SETUP
-- ================================================================
local Services = {
    Workspace = game:GetService("Workspace"),
    ReplicatedStorage = game:GetService("ReplicatedStorage"),
    Players = game:GetService("Players"),
    CollectionService = game:GetService("CollectionService"),
    RunService = game:GetService("RunService")
}

local LocalPlayer = Services.Players.LocalPlayer

-- ================================================================
-- CREATE EVENT TAB
-- ================================================================
local EventTab = Window:AddTab("Event", "calendar")

-- ================================================================
-- DINO GIVE SYSTEM
-- ================================================================
local DinoGiveGroupBox = EventTab:AddLeftGroupbox("Dino Give ü¶ñ")

-- Variables for Dino Give system
local DinoGiveEnabled = false
local SelectedPetsToEquip = {}

-- Common egg pets list (only pets obtainable from Common Egg)
local CommonEggPets = {
    "Dog",
    "Golden Lab", 
    "Bunny"
}

-- Function to get pets from inventory by type
local function getPetsFromInventory(petType)
    local foundPets = {}
    
    local success, result = pcall(function()
        local DataService = require(Services.ReplicatedStorage.Modules.DataService)
        local data = DataService:GetData()
        
        if not data then
            return {}
        end
        
        -- Direct search in PetsData.PetInventory.Data where we know pets exist
        if data.PetsData and data.PetsData.PetInventory and data.PetsData.PetInventory.Data then
            local petInventory = data.PetsData.PetInventory.Data
            for petUUID, petData in pairs(petInventory) do
                if petData and petData.PetType and petData.PetType == petType then
                    table.insert(foundPets, {
                        uuid = petUUID,
                        petType = petData.PetType,
                        petData = petData
                    })
                end
            end
        end
        
        return foundPets
    end)
    
    if success then
        return result
    else
        print("‚ùå Failed to get pets from inventory:", result)
        return {}
    end
end

-- Function to equip a pet
local function equipPet(petUUID)
    local success, err = pcall(function()
        -- Try to get PetServices module like in REfactorMain
        local PetServices = Services.ReplicatedStorage.Modules:FindFirstChild("PetServices")
        if not PetServices then
            print("‚ùå PetServices module not found!")
            return false
        end
        
        local PetsService = require(PetServices:FindFirstChild("PetsService"))
        if not PetsService then
            print("‚ùå PetsService module not found!")
            return false
        end
        
        -- Use the PetsService module's EquipPet function
        PetsService:EquipPet(petUUID, 1) -- Slot 1
        print("üêæ Equipped pet:", petUUID)
        Library:Notify("üêæ Equipped pet with UUID: " .. string.sub(petUUID, 1, 8), 2)
        return true
    end)
    
    if not success then
        print("‚ùå Failed to equip pet:", err)
        Library:Notify("‚ùå Failed to equip pet: " .. tostring(err), 3)
        return false
    end
    
    return success
end

-- Function to perform auto equip for selected pets
local function performDinoGive()
    if not DinoGiveEnabled then return end
    
    local equippedCount = 0
    
    -- Go through each selected pet type
    for petType, isSelected in pairs(SelectedPetsToEquip) do
        if isSelected then
            local pets = getPetsFromInventory(petType)
            
            if #pets > 0 then
                -- Equip the first pet of this type found
                local pet = pets[1]
                local success = equipPet(pet.uuid)
                
                if success then
                    equippedCount = equippedCount + 1
                    print("ü¶ñ Dino Give: Equipped", pet.petType, "with UUID:", pet.uuid)
                    task.wait(0.5) -- Small delay between equips
                end
            else
                print("‚ö†Ô∏è No", petType, "pets found in inventory")
            end
        end
    end
    
    if equippedCount > 0 then
        print("ü¶ñ Dino Give equipped", equippedCount, "pets")
        Library:Notify("ü¶ñ Dino Give equipped " .. equippedCount .. " pets!", 3)
    end
end

-- Multi-select dropdown for pet selection
DinoGiveGroupBox:AddDropdown("DinoGivePets", {
    Values = CommonEggPets,
    Default = 1,
    Multi = true, -- Allow multiple selections
    
    Text = "Select Pets to Equip",
    Tooltip = "Choose which common pets to automatically equip when Dino Give is enabled",
    
    Callback = function(Value)
        print("[cb] Selected pets for Dino Give:", Value)
        SelectedPetsToEquip = Value
    end,
})

-- Dino Give toggle
DinoGiveGroupBox:AddToggle("DinoGive", {
    Text = "Auto Equip Selected Pets",
    Tooltip = "Automatically search inventory and equip selected common pets",
    Default = false,
    Callback = function(Value)
        DinoGiveEnabled = Value
        print("[cb] Dino Give toggled:", Value)
        
        if Value then
            Library:Notify("ü¶ñ Dino Give enabled! Searching and equipping selected pets...", 3)
            
            -- Perform the dino give operation immediately
            task.spawn(function()
                task.wait(0.5) -- Small delay to ensure everything is ready
                performDinoGive()
            end)
        else
            Library:Notify("ü¶ñ Dino Give disabled!", 3)
        end
    end,
})

-- Manual equip button
DinoGiveGroupBox:AddButton("ü¶ñ Equip Selected Pets Now", function()
    Library:Notify("üîç Searching inventory for selected pets...", 2)
    
    task.spawn(function()
        performDinoGive()
    end)
end)

-- ================================================================
-- AUTO HATCH SYSTEM
-- ================================================================
local AutoHatchGroupBox = EventTab:AddLeftGroupbox("AutoHatch ü•ö")

-- Variables for AutoHatch system
local AutoHatchEnabled = false
local BlacklistDinoEggs = false
local autoHatchConnection = nil

-- List of Dinosaur Egg names to blacklist
local DinosaurEggNames = {
    "Dinosaur Egg"
}

-- Function to check if an egg is a dinosaur egg
local function isDinosaurEgg(eggName)
    if not eggName then return false end
    
    for _, dinoEggName in pairs(DinosaurEggNames) do
        if eggName == dinoEggName then
            return true
        end
    end
    return false
end

-- Function to get all player's eggs
local function getPlayerEggs()
    local playerEggs = {}
    
    -- Get all eggs with PetEggServer tag that belong to the player
    for _, eggObject in pairs(Services.CollectionService:GetTagged("PetEggServer")) do
        if eggObject:GetAttribute("OWNER") == LocalPlayer.Name then
            table.insert(playerEggs, eggObject)
        end
    end
    
    return playerEggs
end

-- Function to check if an egg is ready to hatch
local function isEggReady(eggObject)
    -- Check if egg has READY attribute and it's true
    local ready = eggObject:GetAttribute("READY")
    local timeToHatch = eggObject:GetAttribute("TimeToHatch")
    
    -- Egg is ready if READY attribute is true OR TimeToHatch is 0 or nil
    return (ready == true) or (timeToHatch and timeToHatch <= 0)
end

-- Function to hatch an egg
local function hatchEgg(eggObject)
    -- Get the PetEggService remote event
    local PetEggService = Services.ReplicatedStorage.GameEvents:FindFirstChild("PetEggService")
    
    if PetEggService then
        -- Fire the server with "HatchPet" command and the egg object
        PetEggService:FireServer("HatchPet", eggObject)
        
        local eggName = eggObject:GetAttribute("EggName") or "Unknown Egg"
        print("ü•ö Hatched:", eggName)
        Library:Notify("ü•ö Hatched: " .. eggName, 2)
        return true
    else
        print("‚ùå PetEggService not found!")
        return false
    end
end

-- Main auto hatch function
local function performAutoHatch()
    if not AutoHatchEnabled then return end
    
    local playerEggs = getPlayerEggs()
    local hatchedCount = 0
    
    for _, eggObject in pairs(playerEggs) do
        if isEggReady(eggObject) then
            local eggName = eggObject:GetAttribute("EggName")
            
            -- Check if we should skip dinosaur eggs
            if BlacklistDinoEggs and isDinosaurEgg(eggName) then
                print("‚ö†Ô∏è Skipping Dinosaur Egg (blacklisted):", eggName)
                continue
            end
            
            -- Attempt to hatch the egg
            local success = hatchEgg(eggObject)
            if success then
                hatchedCount = hatchedCount + 1
                task.wait(0.5) -- Small delay between hatches
            end
        end
    end
    
    if hatchedCount > 0 then
        print("ü•ö Auto hatched", hatchedCount, "eggs")
    end
end

-- Auto Hatch toggle
AutoHatchGroupBox:AddToggle("AutoHatch", {
    Text = "Auto Hatch",
    Tooltip = "Automatically hatch ready eggs on your farm",
    Default = false,
    Callback = function(Value)
        AutoHatchEnabled = Value
        print("[cb] Auto Hatch toggled:", Value)
        
        if Value then
            Library:Notify("ü•ö Auto Hatch enabled!", 3)
            
            -- Start auto hatch loop
            autoHatchConnection = Services.RunService.Heartbeat:Connect(function()
                performAutoHatch()
            end)
        else
            Library:Notify("ü•ö Auto Hatch disabled!", 3)
            
            -- Stop auto hatch loop
            if autoHatchConnection then
                autoHatchConnection:Disconnect()
                autoHatchConnection = nil
            end
        end
    end,
})

-- Blacklist Dino Eggs toggle
AutoHatchGroupBox:AddToggle("BlacklistDinoEggs", {
    Text = "Blacklist Dino Eggs from Auto Hatch",
    Tooltip = "Skip dinosaur eggs when auto hatching",
    Default = false,
    Callback = function(Value)
        BlacklistDinoEggs = Value
        print("[cb] Blacklist Dino Eggs toggled:", Value)
        
        if Value then
            Library:Notify("ü¶ï Dinosaur eggs will be skipped during auto hatch", 3)
        else
            Library:Notify("ü•ö All eggs will be auto hatched (including dinosaur eggs)", 3)
        end
    end,
})

-- ================================================================
-- DINO MACHINE SYSTEM
-- ================================================================
local DinoMachineGroupBox = EventTab:AddRightGroupbox("Dino Machine ü¶ï")

-- Variables for Dino Machine system
local AutoClaimEnabled = false
local autoClaimConnection = nil

-- Function to get dino machine data
local function getDinoMachineData()
    local success, result = pcall(function()
        local DataService = require(Services.ReplicatedStorage.Modules.DataService)
        local data = DataService:GetData()
        
        if not data then
            return nil
        end
        
        if not data.DinoMachine then
            return nil
        end
        
        return data.DinoMachine
    end)
    
    if success then
        return result
    else
        print("‚ùå Failed to get dino machine data:", result)
        return nil
    end
end

-- Function to check if machine reward is ready
local function isMachineRewardReady()
    local machineData = getDinoMachineData()
    if not machineData then
        return false
    end
    
    -- Machine is ready if RewardReady is true and TimeLeft is 0 or less
    return machineData.RewardReady == true and (machineData.TimeLeft or 0) <= 0
end

-- Function to claim machine reward
local function claimMachineReward()
    local success, err = pcall(function()
        local DinoMachineService_RE = Services.ReplicatedStorage.GameEvents:FindFirstChild("DinoMachineService_RE")
        
        if DinoMachineService_RE then
            DinoMachineService_RE:FireServer("ClaimReward")
            print("üéÅ Claimed dino machine reward!")
            Library:Notify("üéÅ Claimed dino machine reward!", 2)
            return true
        else
            print("‚ùå DinoMachineService_RE not found!")
            return false
        end
    end)
    
    if not success then
        print("‚ùå Failed to claim dino machine reward:", err)
        return false
    end
    
    return success
end

-- Main auto claim function
local function performAutoClaim()
    if not AutoClaimEnabled then return end
    
    -- Check if machine reward is ready
    if isMachineRewardReady() then
        claimMachineReward()
    end
end

-- Auto Claim toggle
DinoMachineGroupBox:AddToggle("AutoClaim", {
    Text = "Auto Claim",
    Tooltip = "Automatically claim rewards from dino machine when ready",
    Default = false,
    Callback = function(Value)
        AutoClaimEnabled = Value
        print("[cb] Auto Claim toggled:", Value)
        
        if Value then
            Library:Notify("üéÅ Auto Claim enabled!", 3)
            
            -- Start auto claim loop
            autoClaimConnection = Services.RunService.Heartbeat:Connect(function()
                performAutoClaim()
            end)
        else
            Library:Notify("üéÅ Auto Claim disabled!", 3)
            
            -- Stop auto claim loop
            if autoClaimConnection then
                autoClaimConnection:Disconnect()
                autoClaimConnection = nil
            end
        end
    end,
})

-- ================================================================
-- EVENT TAB INITIALIZATION COMPLETE
-- ================================================================
print("üéâ Event Tab with AutoHatch initialized successfully!")
Library:Notify("ü•ö AutoHatch Event Tab loaded!", 3)

-- Return success indicator
return true
